!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	24;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	125;"	d	file:
BBLOCK	fs.h	46;"	d
BCAST	lapic.c	27;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	43;"	d
BSIZE	fs.h	12;"	d
BUSY	lapic.c	28;"	d	file:
B_BUSY	buf.h	10;"	d
B_DIRTY	buf.h	12;"	d
B_VALID	buf.h	11;"	d
C	console.c	185;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -fvar-tracking -fvar-tracking-assignments -O0 -g -Wall -MD -gdwarf-2 -m32 -Werror -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	134;"	d	file:
CMOS_RETURN	lapic.c	135;"	d	file:
CMOS_STATA	lapic.c	174;"	d	file:
CMOS_STATB	lapic.c	175;"	d	file:
CMOS_UIP	lapic.c	176;"	d	file:
COM1	uart.c	14;"	d	file:
CONSOLE	file.h	38;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	225;"	d	file:
CONV	lapic.c	232;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	126;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	181;"	d	file:
DEASSERT	lapic.c	25;"	d	file:
DELIVS	lapic.c	23;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	49;"	d
DPL_USER	mmu.h	79;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	18;"	d	file:
EOI	lapic.c	16;"	d	file:
ERROR	lapic.c	37;"	d	file:
ESR	lapic.c	19;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	29;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	180;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	40;"	d
ICRHI	lapic.c	30;"	d	file:
ICRLO	lapic.c	20;"	d	file:
ID	lapic.c	13;"	d	file:
IDE_BSY	ide.c	14;"	d	file:
IDE_CMD_READ	ide.c	19;"	d	file:
IDE_CMD_WRITE	ide.c	20;"	d	file:
IDE_DF	ide.c	16;"	d	file:
IDE_DRDY	ide.c	15;"	d	file:
IDE_ERR	ide.c	17;"	d	file:
INIT	lapic.c	21;"	d	file:
INPUT_BUF	console.c	176;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	8;"	d	file:
IO_PIC2	picirq.c	9;"	d	file:
IO_TIMER1	timer.c	10;"	d	file:
IPB	fs.h	37;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SLAVE	picirq.c	11;"	d	file:
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_BUSY	file.h	26;"	d
I_VALID	file.h	27;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0x80000000         \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	26;"	d	file:
LINT0	lapic.c	35;"	d	file:
LINT1	lapic.c	36;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	38;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	24;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	179;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	182;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	22;"	d
NELEM	defs.h	183;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	23;"	d
NINODE	param.h	6;"	d
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	121;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	122;"	d
NSEGS	proc.h	2;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	19;"	d
P2V_WO	memlayout.h	22;"	d
PCINT	lapic.c	34;"	d	file:
PDX	mmu.h	112;"	d
PDXSHIFT	mmu.h	127;"	d
PERIODIC	lapic.c	33;"	d	file:
PGADDR	mmu.h	118;"	d
PGROUNDDOWN	mmu.h	130;"	d
PGROUNDUP	mmu.h	129;"	d
PGSHIFT	mmu.h	125;"	d
PGSIZE	mmu.h	123;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	10;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	138;"	d
PTE_ADDR	mmu.h	144;"	d
PTE_D	mmu.h	139;"	d
PTE_FLAGS	mmu.h	145;"	d
PTE_MBZ	mmu.h	141;"	d
PTE_P	mmu.h	133;"	d
PTE_PCD	mmu.h	137;"	d
PTE_PS	mmu.h	140;"	d
PTE_PWT	mmu.h	136;"	d
PTE_U	mmu.h	135;"	d
PTE_W	mmu.h	134;"	d
PTX	mmu.h	115;"	d
PTXSHIFT	mmu.h	126;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	11;"	d
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	178;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	69;"	d
SEG16	mmu.h	73;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	42;"	d
SEG_KCPU	mmu.h	44;"	d
SEG_KDATA	mmu.h	43;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	47;"	d
SEG_UCODE	mmu.h	45;"	d
SEG_UDATA	mmu.h	46;"	d
SETGATE	mmu.h	213;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	22;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	87;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	84;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	83;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	86;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	85;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	82;"	d
STS_CG16	mmu.h	93;"	d
STS_CG32	mmu.h	99;"	d
STS_IG16	mmu.h	95;"	d
STS_IG32	mmu.h	100;"	d
STS_LDT	mmu.h	91;"	d
STS_T16A	mmu.h	90;"	d
STS_T16B	mmu.h	92;"	d
STS_T32A	mmu.h	97;"	d
STS_T32B	mmu.h	98;"	d
STS_TG	mmu.h	94;"	d
STS_TG16	mmu.h	96;"	d
STS_TG32	mmu.h	101;"	d
SVR	lapic.c	17;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_halt	syscall.h	23;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	40;"	d	file:
TDCR	lapic.c	41;"	d	file:
TICR	lapic.c	39;"	d	file:
TIMER	lapic.c	31;"	d	file:
TIMER_16BIT	kernel.asm	/^#define TIMER_16BIT     0x30    \/\/ r\/w counter 16 bits, LSB first$/;"	d
TIMER_16BIT	timer.c	22;"	d	file:
TIMER_DIV	timer.c	17;"	d	file:
TIMER_FREQ	timer.c	16;"	d	file:
TIMER_MODE	timer.c	19;"	d	file:
TIMER_RATEGEN	kernel.asm	/^#define TIMER_RATEGEN   0x04    \/\/ mode 2, rate generator$/;"	d
TIMER_RATEGEN	timer.c	21;"	d	file:
TIMER_SEL0	timer.c	20;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	15;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	18;"	d
V2P_WO	memlayout.h	21;"	d
VER	lapic.c	14;"	d	file:
X1	lapic.c	32;"	d	file:
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	183;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ls.asm	/^   a:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	75 05                	jne    11 <runcmd+0x11>$/;"	l
a	stressfs.asm	/^   a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	grep.asm	/^  a0:	89 d1                	mov    %edx,%ecx$/;"	l
a0	stressfs.asm	/^  a0:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
a0	wc.asm	/^  a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a00	grep.asm	/^ a00:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a00	ls.asm	/^ a00:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a00	usertests.asm	/^     a00:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a03	grep.asm	/^ a03:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
a03	ls.asm	/^ a03:	75 0c                	jne    a11 <malloc+0x6e>$/;"	l
a03	usertests.asm	/^     a03:	50                   	push   %eax$/;"	l
a04	sh.asm	/^     a04:	e8 91 f9 ff ff       	call   39a <panic>$/;"	l
a04	usertests.asm	/^     a04:	e8 bb 34 00 00       	call   3ec4 <close>$/;"	l
a05	ls.asm	/^ a05:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a06	grep.asm	/^ a06:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a08	ls.asm	/^ a08:	8b 10                	mov    (%eax),%edx$/;"	l
a09	grep.asm	/^ a09:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
a09	sh.asm	/^     a09:	83 c4 10             	add    $0x10,%esp$/;"	l
a09	usertests.asm	/^     a09:	83 c4 10             	add    $0x10,%esp$/;"	l
a0a	ls.asm	/^ a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a0c	grep.asm	/^ a0c:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a0c	sh.asm	/^     a0c:	6a 00                	push   $0x0$/;"	l
a0c	usertests.asm	/^     a0c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
a0d	ls.asm	/^ a0d:	89 10                	mov    %edx,(%eax)$/;"	l
a0e	sh.asm	/^     a0e:	6a 00                	push   $0x0$/;"	l
a0f	grep.asm	/^ a0f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a0f	ls.asm	/^ a0f:	eb 26                	jmp    a37 <malloc+0x94>$/;"	l
a1	cat.asm	/^  a1:	50                   	push   %eax$/;"	l
a1	init.asm	/^  a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a1	kill.asm	/^  a1:	8a 10                	mov    (%eax),%dl$/;"	l
a1	sh.asm	/^      a1:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a1	usertests.asm	/^      a1:	83 c4 10             	add    $0x10,%esp$/;"	l
a1	zombie.asm	/^  a1:	74 e3                	je     86 <strcmp+0x5>$/;"	l
a10	sh.asm	/^     a10:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a11	ls.asm	/^ a11:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a12	grep.asm	/^ a12:	a3 c8 0a 00 00       	mov    %eax,0xac8$/;"	l
a13	sh.asm	/^     a13:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a13	usertests.asm	/^     a13:	eb 60                	jmp    a75 <pipe1+0xc1>$/;"	l
a14	ls.asm	/^ a14:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a15	usertests.asm	/^     a15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
a16	sh.asm	/^     a16:	e8 30 fb ff ff       	call   54b <gettoken>$/;"	l
a17	grep.asm	/^ a17:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a17	ls.asm	/^ a17:	89 c2                	mov    %eax,%edx$/;"	l
a19	ls.asm	/^ a19:	2b 55 ec             	sub    -0x14(%ebp),%edx$/;"	l
a1a	grep.asm	/^ a1a:	83 c0 08             	add    $0x8,%eax$/;"	l
a1b	sh.asm	/^     a1b:	83 c4 10             	add    $0x10,%esp$/;"	l
a1c	ls.asm	/^ a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a1c	usertests.asm	/^     a1c:	eb 14                	jmp    a32 <pipe1+0x7e>$/;"	l
a1d	grep.asm	/^ a1d:	eb 3b                	jmp    a5a <malloc+0xdf>$/;"	l
a1e	sh.asm	/^     a1e:	83 ec 04             	sub    $0x4,%esp$/;"	l
a1e	usertests.asm	/^     a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a1f	grep.asm	/^ a1f:	a1 c8 0a 00 00       	mov    0xac8,%eax$/;"	l
a1f	ls.asm	/^ a1f:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a2	cat.asm	/^  a2:	e8 d1 02 00 00       	call   378 <open>$/;"	l
a2	echo.asm	/^  a2:	ff 45 08             	incl   0x8(%ebp)$/;"	l
a2	forktest.asm	/^  a2:	68 13 04 00 00       	push   $0x413$/;"	l
a2	grep.asm	/^  a2:	29 c1                	sub    %eax,%ecx$/;"	l
a2	ln.asm	/^  a2:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a2	mkdir.asm	/^  a2:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
a2	rm.asm	/^  a2:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
a21	sh.asm	/^     a21:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a21	usertests.asm	/^     a21:	8b 55 f0             	mov    -0x10(%ebp),%edx$/;"	l
a22	ls.asm	/^ a22:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a24	grep.asm	/^ a24:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
a24	sh.asm	/^     a24:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a24	usertests.asm	/^     a24:	81 c2 a0 83 00 00    	add    $0x83a0,%edx$/;"	l
a25	ls.asm	/^ a25:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a27	grep.asm	/^ a27:	75 1e                	jne    a47 <malloc+0xcc>$/;"	l
a27	sh.asm	/^     a27:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
a28	ls.asm	/^ a28:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a29	grep.asm	/^ a29:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a2a	sh.asm	/^     a2a:	e8 79 fe ff ff       	call   8a8 <parseredirs>$/;"	l
a2a	usertests.asm	/^     a2a:	88 02                	mov    %al,(%edx)$/;"	l
a2b	ls.asm	/^ a2b:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
a2c	grep.asm	/^ a2c:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
a2c	usertests.asm	/^     a2c:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
a2e	ls.asm	/^ a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a2f	grep.asm	/^ a2f:	e8 e7 fe ff ff       	call   91b <morecore>$/;"	l
a2f	sh.asm	/^     a2f:	83 c4 10             	add    $0x10,%esp$/;"	l
a2f	usertests.asm	/^     a2f:	ff 45 f0             	incl   -0x10(%ebp)$/;"	l
a3	kill.asm	/^  a3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a3	stressfs.asm	/^  a3:	50                   	push   %eax$/;"	l
a3	zombie.asm	/^  a3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a31	ls.asm	/^ a31:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
a32	sh.asm	/^     a32:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a32	usertests.asm	/^     a32:	81 7d f0 08 04 00 00 	cmpl   $0x408,-0x10(%ebp)$/;"	l
a34	grep.asm	/^ a34:	83 c4 10             	add    $0x10,%esp$/;"	l
a34	ls.asm	/^ a34:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a35	sh.asm	/^     a35:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a37	grep.asm	/^ a37:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a37	ls.asm	/^ a37:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a38	sh.asm	/^     a38:	c9                   	leave  $/;"	l
a39	sh.asm	/^     a39:	c3                   	ret    $/;"	l
a39	usertests.asm	/^     a39:	7e e3                	jle    a1e <pipe1+0x6a>$/;"	l
a3a	grep.asm	/^ a3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a3a	ls.asm	/^ a3a:	a3 04 0b 00 00       	mov    %eax,0xb04$/;"	l
a3a	sh.asm	/^     a3a:	55                   	push   %ebp$/;"	l
a3b	sh.asm	/^     a3b:	89 e5                	mov    %esp,%ebp$/;"	l
a3b	usertests.asm	/^     a3b:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a3d	sh.asm	/^     a3d:	83 ec 28             	sub    $0x28,%esp$/;"	l
a3e	grep.asm	/^ a3e:	75 07                	jne    a47 <malloc+0xcc>$/;"	l
a3e	usertests.asm	/^     a3e:	83 ec 04             	sub    $0x4,%esp$/;"	l
a3f	ls.asm	/^ a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4	grep.asm	/^  a4:	89 c8                	mov    %ecx,%eax$/;"	l
a4	ls.asm	/^  a4:	83 c4 10             	add    $0x10,%esp$/;"	l
a4	sh.asm	/^      a4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	stressfs.asm	/^  a4:	e8 1f 03 00 00       	call   3c8 <open>$/;"	l
a4	usertests.asm	/^      a4:	e8 f3 3d 00 00       	call   3e9c <exit>$/;"	l
a4	wc.asm	/^  a4:	0f 8f 78 ff ff ff    	jg     22 <wc+0x22>$/;"	l
a40	grep.asm	/^ a40:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a40	sh.asm	/^     a40:	83 ec 04             	sub    $0x4,%esp$/;"	l
a41	usertests.asm	/^     a41:	68 09 04 00 00       	push   $0x409$/;"	l
a42	ls.asm	/^ a42:	83 c0 08             	add    $0x8,%eax$/;"	l
a43	sh.asm	/^     a43:	68 57 14 00 00       	push   $0x1457$/;"	l
a45	grep.asm	/^ a45:	eb 13                	jmp    a5a <malloc+0xdf>$/;"	l
a45	ls.asm	/^ a45:	eb 3b                	jmp    a82 <malloc+0xdf>$/;"	l
a46	usertests.asm	/^     a46:	68 a0 83 00 00       	push   $0x83a0$/;"	l
a47	grep.asm	/^ a47:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a47	ls.asm	/^ a47:	a1 04 0b 00 00       	mov    0xb04,%eax$/;"	l
a48	sh.asm	/^     a48:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a4a	grep.asm	/^ a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a4b	sh.asm	/^     a4b:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a4b	usertests.asm	/^     a4b:	50                   	push   %eax$/;"	l
a4c	ls.asm	/^ a4c:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
a4c	usertests.asm	/^     a4c:	e8 6b 34 00 00       	call   3ebc <write>$/;"	l
a4d	grep.asm	/^ a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4e	sh.asm	/^     a4e:	e8 39 fc ff ff       	call   68c <peek>$/;"	l
a4f	ls.asm	/^ a4f:	75 1e                	jne    a6f <malloc+0xcc>$/;"	l
a5	echo.asm	/^  a5:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
a5	init.asm	/^  a5:	75 3e                	jne    e5 <main+0xe5>$/;"	l
a5	ln.asm	/^  a5:	90                   	nop$/;"	l
a5	mkdir.asm	/^  a5:	5b                   	pop    %ebx$/;"	l
a5	rm.asm	/^  a5:	5b                   	pop    %ebx$/;"	l
a50	grep.asm	/^ a50:	8b 00                	mov    (%eax),%eax$/;"	l
a51	ls.asm	/^ a51:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a51	usertests.asm	/^     a51:	83 c4 10             	add    $0x10,%esp$/;"	l
a52	grep.asm	/^ a52:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a53	sh.asm	/^     a53:	83 c4 10             	add    $0x10,%esp$/;"	l
a54	ls.asm	/^ a54:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
a54	usertests.asm	/^     a54:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
a55	grep.asm	/^ a55:	e9 6d ff ff ff       	jmp    9c7 <malloc+0x4c>$/;"	l
a56	sh.asm	/^     a56:	85 c0                	test   %eax,%eax$/;"	l
a57	ls.asm	/^ a57:	e8 e7 fe ff ff       	call   943 <morecore>$/;"	l
a58	sh.asm	/^     a58:	74 16                	je     a70 <parseexec+0x36>$/;"	l
a59	usertests.asm	/^     a59:	74 17                	je     a72 <pipe1+0xbe>$/;"	l
a5a	grep.asm	/^ a5a:	c9                   	leave  $/;"	l
a5a	sh.asm	/^     a5a:	83 ec 08             	sub    $0x8,%esp$/;"	l
a5b	grep.asm	/^ a5b:	c3                   	ret    $/;"	l
a5b	usertests.asm	/^     a5b:	83 ec 08             	sub    $0x8,%esp$/;"	l
a5c	ls.asm	/^ a5c:	83 c4 10             	add    $0x10,%esp$/;"	l
a5d	sh.asm	/^     a5d:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a5e	usertests.asm	/^     a5e:	68 35 48 00 00       	push   $0x4835$/;"	l
a5f	ls.asm	/^ a5f:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a6	grep.asm	/^  a6:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
a6	kill.asm	/^  a6:	88 10                	mov    %dl,(%eax)$/;"	l
a6	ln.asm	/^  a6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a6	mkdir.asm	/^  a6:	5f                   	pop    %edi$/;"	l
a6	rm.asm	/^  a6:	5f                   	pop    %edi$/;"	l
a6	zombie.asm	/^  a6:	8a 00                	mov    (%eax),%al$/;"	l
a60	sh.asm	/^     a60:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a62	ls.asm	/^ a62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
a63	sh.asm	/^     a63:	e8 24 ff ff ff       	call   98c <parseblock>$/;"	l
a63	usertests.asm	/^     a63:	6a 01                	push   $0x1$/;"	l
a65	usertests.asm	/^     a65:	e8 a1 35 00 00       	call   400b <printf>$/;"	l
a66	ls.asm	/^ a66:	75 07                	jne    a6f <malloc+0xcc>$/;"	l
a68	ls.asm	/^ a68:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a68	sh.asm	/^     a68:	83 c4 10             	add    $0x10,%esp$/;"	l
a6a	usertests.asm	/^     a6a:	83 c4 10             	add    $0x10,%esp$/;"	l
a6b	sh.asm	/^     a6b:	e9 fa 00 00 00       	jmp    b6a <parseexec+0x130>$/;"	l
a6d	ls.asm	/^ a6d:	eb 13                	jmp    a82 <malloc+0xdf>$/;"	l
a6d	usertests.asm	/^     a6d:	e8 2a 34 00 00       	call   3e9c <exit>$/;"	l
a6f	ls.asm	/^ a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a7	cat.asm	/^  a7:	83 c4 10             	add    $0x10,%esp$/;"	l
a7	forktest.asm	/^  a7:	6a 01                	push   $0x1$/;"	l
a7	init.asm	/^  a7:	83 ec 08             	sub    $0x8,%esp$/;"	l
a7	ls.asm	/^  a7:	b8 ec 0a 00 00       	mov    $0xaec,%eax$/;"	l
a7	mkdir.asm	/^  a7:	c9                   	leave  $/;"	l
a7	rm.asm	/^  a7:	c9                   	leave  $/;"	l
a7	sh.asm	/^      a7:	52                   	push   %edx$/;"	l
a70	sh.asm	/^     a70:	e8 6e f9 ff ff       	call   3e3 <execcmd>$/;"	l
a72	ls.asm	/^ a72:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a72	usertests.asm	/^     a72:	ff 45 ec             	incl   -0x14(%ebp)$/;"	l
a75	ls.asm	/^ a75:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a75	sh.asm	/^     a75:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a75	usertests.asm	/^     a75:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)$/;"	l
a78	ls.asm	/^ a78:	8b 00                	mov    (%eax),%eax$/;"	l
a78	sh.asm	/^     a78:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a79	usertests.asm	/^     a79:	7e 9a                	jle    a15 <pipe1+0x61>$/;"	l
a7a	ls.asm	/^ a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a7b	sh.asm	/^     a7b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a7b	usertests.asm	/^     a7b:	e8 1c 34 00 00       	call   3e9c <exit>$/;"	l
a7d	ls.asm	/^ a7d:	e9 6d ff ff ff       	jmp    9ef <malloc+0x4c>$/;"	l
a7e	sh.asm	/^     a7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a8	echo.asm	/^  a8:	84 c0                	test   %al,%al$/;"	l
a8	kill.asm	/^  a8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a8	mkdir.asm	/^  a8:	c3                   	ret    $/;"	l
a8	rm.asm	/^  a8:	c3                   	ret    $/;"	l
a8	sh.asm	/^      a8:	50                   	push   %eax$/;"	l
a8	zombie.asm	/^  a8:	0f b6 d0             	movzbl %al,%edx$/;"	l
a80	usertests.asm	/^     a80:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a82	ls.asm	/^ a82:	c9                   	leave  $/;"	l
a83	ls.asm	/^ a83:	c3                   	ret    $/;"	l
a84	usertests.asm	/^     a84:	0f 8e f4 00 00 00    	jle    b7e <pipe1+0x1ca>$/;"	l
a85	sh.asm	/^     a85:	83 ec 04             	sub    $0x4,%esp$/;"	l
a88	sh.asm	/^     a88:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a8a	usertests.asm	/^     a8a:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a8b	sh.asm	/^     a8b:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a8d	usertests.asm	/^     a8d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a8e	sh.asm	/^     a8e:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
a9	forktest.asm	/^  a9:	e8 52 ff ff ff       	call   0 <printf>$/;"	l
a9	grep.asm	/^  a9:	83 ec 04             	sub    $0x4,%esp$/;"	l
a9	ln.asm	/^  a9:	8a 10                	mov    (%eax),%dl$/;"	l
a9	mkdir.asm	/^  a9:	55                   	push   %ebp$/;"	l
a9	rm.asm	/^  a9:	55                   	push   %ebp$/;"	l
a9	sh.asm	/^      a9:	e8 2e 0e 00 00       	call   edc <open>$/;"	l
a9	stressfs.asm	/^  a9:	83 c4 10             	add    $0x10,%esp$/;"	l
a9	usertests.asm	/^      a9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a90	usertests.asm	/^     a90:	50                   	push   %eax$/;"	l
a91	sh.asm	/^     a91:	e8 12 fe ff ff       	call   8a8 <parseredirs>$/;"	l
a91	usertests.asm	/^     a91:	e8 2e 34 00 00       	call   3ec4 <close>$/;"	l
a96	sh.asm	/^     a96:	83 c4 10             	add    $0x10,%esp$/;"	l
a96	usertests.asm	/^     a96:	83 c4 10             	add    $0x10,%esp$/;"	l
a99	sh.asm	/^     a99:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a99	usertests.asm	/^     a99:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
a9c	sh.asm	/^     a9c:	e9 86 00 00 00       	jmp    b27 <parseexec+0xed>$/;"	l
aa	cat.asm	/^  aa:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
aa	echo.asm	/^  aa:	75 e2                	jne    8e <strcpy+0xd>$/;"	l
aa	init.asm	/^  aa:	68 a8 08 00 00       	push   $0x8a8$/;"	l
aa	mkdir.asm	/^  aa:	89 e5                	mov    %esp,%ebp$/;"	l
aa	rm.asm	/^  aa:	89 e5                	mov    %esp,%ebp$/;"	l
aa	wc.asm	/^  aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
aa0	usertests.asm	/^     aa0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)$/;"	l
aa1	sh.asm	/^     aa1:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
aa4	sh.asm	/^     aa4:	50                   	push   %eax$/;"	l
aa5	sh.asm	/^     aa5:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
aa7	usertests.asm	/^     aa7:	eb 66                	jmp    b0f <pipe1+0x15b>$/;"	l
aa8	sh.asm	/^     aa8:	50                   	push   %eax$/;"	l
aa9	sh.asm	/^     aa9:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
aa9	usertests.asm	/^     aa9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
aac	sh.asm	/^     aac:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
aaf	sh.asm	/^     aaf:	e8 97 fa ff ff       	call   54b <gettoken>$/;"	l
ab	kill.asm	/^  ab:	8a 00                	mov    (%eax),%al$/;"	l
ab	ln.asm	/^  ab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ab	zombie.asm	/^  ab:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ab0	usertests.asm	/^     ab0:	eb 3b                	jmp    aed <pipe1+0x139>$/;"	l
ab2	usertests.asm	/^     ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ab4	sh.asm	/^     ab4:	83 c4 10             	add    $0x10,%esp$/;"	l
ab5	usertests.asm	/^     ab5:	05 a0 83 00 00       	add    $0x83a0,%eax$/;"	l
ab7	sh.asm	/^     ab7:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
aba	sh.asm	/^     aba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
aba	usertests.asm	/^     aba:	8a 00                	mov    (%eax),%al$/;"	l
abc	usertests.asm	/^     abc:	0f be c0             	movsbl %al,%eax$/;"	l
abe	sh.asm	/^     abe:	0f 84 83 00 00 00    	je     b47 <parseexec+0x10d>$/;"	l
abf	usertests.asm	/^     abf:	33 45 f4             	xor    -0xc(%ebp),%eax$/;"	l
ac	echo.asm	/^  ac:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ac	grep.asm	/^  ac:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
ac	ls.asm	/^  ac:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
ac	mkdir.asm	/^  ac:	83 ec 10             	sub    $0x10,%esp$/;"	l
ac	rm.asm	/^  ac:	83 ec 10             	sub    $0x10,%esp$/;"	l
ac	stressfs.asm	/^  ac:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ac	usertests.asm	/^      ac:	68 26 44 00 00       	push   $0x4426$/;"	l
ac2	usertests.asm	/^     ac2:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ac4	sh.asm	/^     ac4:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)$/;"	l
ac7	usertests.asm	/^     ac7:	85 c0                	test   %eax,%eax$/;"	l
ac8	sh.asm	/^     ac8:	74 10                	je     ada <parseexec+0xa0>$/;"	l
ac9	usertests.asm	/^     ac9:	0f 95 c0             	setne  %al$/;"	l
aca	sh.asm	/^     aca:	83 ec 0c             	sub    $0xc,%esp$/;"	l
acc	usertests.asm	/^     acc:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
acd	sh.asm	/^     acd:	68 2a 14 00 00       	push   $0x142a$/;"	l
acf	usertests.asm	/^     acf:	84 c0                	test   %al,%al$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
ad	cat.asm	/^  ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ad	kill.asm	/^  ad:	84 c0                	test   %al,%al$/;"	l
ad1	usertests.asm	/^     ad1:	74 17                	je     aea <pipe1+0x136>$/;"	l
ad2	sh.asm	/^     ad2:	e8 c3 f8 ff ff       	call   39a <panic>$/;"	l
ad3	usertests.asm	/^     ad3:	83 ec 08             	sub    $0x8,%esp$/;"	l
ad6	usertests.asm	/^     ad6:	68 43 48 00 00       	push   $0x4843$/;"	l
ad7	sh.asm	/^     ad7:	83 c4 10             	add    $0x10,%esp$/;"	l
ada	sh.asm	/^     ada:	8b 4d e4             	mov    -0x1c(%ebp),%ecx$/;"	l
adb	usertests.asm	/^     adb:	6a 01                	push   $0x1$/;"	l
add	sh.asm	/^     add:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
add	usertests.asm	/^     add:	e8 29 35 00 00       	call   400b <printf>$/;"	l
addr	kernel.asm	/^  addr = p2v(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ae	forktest.asm	/^  ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae	ln.asm	/^  ae:	88 10                	mov    %dl,(%eax)$/;"	l
ae	sh.asm	/^      ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae	wc.asm	/^  ae:	79 17                	jns    c7 <wc+0xc7>$/;"	l
ae	zombie.asm	/^  ae:	8a 00                	mov    (%eax),%al$/;"	l
ae0	sh.asm	/^     ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
ae2	usertests.asm	/^     ae2:	83 c4 10             	add    $0x10,%esp$/;"	l
ae3	sh.asm	/^     ae3:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)$/;"	l
ae5	usertests.asm	/^     ae5:	e9 ab 00 00 00       	jmp    b95 <pipe1+0x1e1>$/;"	l
ae7	sh.asm	/^     ae7:	8b 55 e0             	mov    -0x20(%ebp),%edx$/;"	l
aea	sh.asm	/^     aea:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
aea	usertests.asm	/^     aea:	ff 45 f0             	incl   -0x10(%ebp)$/;"	l
aed	sh.asm	/^     aed:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
aed	usertests.asm	/^     aed:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
af	echo.asm	/^  af:	c9                   	leave  $/;"	l
af	grep.asm	/^  af:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
af	init.asm	/^  af:	68 50 08 00 00       	push   $0x850$/;"	l
af	kill.asm	/^  af:	0f 95 c0             	setne  %al$/;"	l
af	ls.asm	/^  af:	c9                   	leave  $/;"	l
af	mkdir.asm	/^  af:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
af	rm.asm	/^  af:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
af	stressfs.asm	/^  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
af0	sh.asm	/^     af0:	83 c1 08             	add    $0x8,%ecx$/;"	l
af0	usertests.asm	/^     af0:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
af3	sh.asm	/^     af3:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)$/;"	l
af3	usertests.asm	/^     af3:	7c bd                	jl     ab2 <pipe1+0xfe>$/;"	l
af5	usertests.asm	/^     af5:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
af7	sh.asm	/^     af7:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
af8	usertests.asm	/^     af8:	01 45 e4             	add    %eax,-0x1c(%ebp)$/;"	l
afa	sh.asm	/^     afa:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
afb	usertests.asm	/^     afb:	d1 65 e8             	shll   -0x18(%ebp)$/;"	d
afe	sh.asm	/^     afe:	7e 10                	jle    b10 <parseexec+0xd6>$/;"	l
afe	usertests.asm	/^     afe:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, sector);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	stressfs.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	83 ec 08             	sub    $0x8,%esp$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	echo.asm	/^  b0:	c3                   	ret    $/;"	l
b0	ln.asm	/^  b0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b0	ls.asm	/^  b0:	c3                   	ret    $/;"	l
b0	wc.asm	/^  b0:	83 ec 08             	sub    $0x8,%esp$/;"	l
b0	zombie.asm	/^  b0:	0f b6 c0             	movzbl %al,%eax$/;"	l
b00	sh.asm	/^     b00:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b01	usertests.asm	/^     b01:	3d 00 20 00 00       	cmp    $0x2000,%eax$/;"	l
b03	sh.asm	/^     b03:	68 79 14 00 00       	push   $0x1479$/;"	l
b06	usertests.asm	/^     b06:	76 07                	jbe    b0f <pipe1+0x15b>$/;"	l
b08	sh.asm	/^     b08:	e8 8d f8 ff ff       	call   39a <panic>$/;"	l
b08	usertests.asm	/^     b08:	c7 45 e8 00 20 00 00 	movl   $0x2000,-0x18(%ebp)$/;"	l
b0d	sh.asm	/^     b0d:	83 c4 10             	add    $0x10,%esp$/;"	l
b0f	usertests.asm	/^     b0f:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b1	cat.asm	/^  b1:	79 23                	jns    d6 <main+0x79>$/;"	l
b1	echo.asm	/^  b1:	55                   	push   %ebp$/;"	l
b1	forktest.asm	/^  b1:	e8 92 02 00 00       	call   348 <exit>$/;"	l
b1	ls.asm	/^  b1:	55                   	push   %ebp$/;"	l
b1	sh.asm	/^      b1:	85 c0                	test   %eax,%eax$/;"	l
b1	usertests.asm	/^      b1:	e8 56 3e 00 00       	call   3f0c <chdir>$/;"	l
b10	sh.asm	/^     b10:	83 ec 04             	sub    $0x4,%esp$/;"	l
b12	usertests.asm	/^     b12:	83 ec 04             	sub    $0x4,%esp$/;"	l
b13	sh.asm	/^     b13:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b15	usertests.asm	/^     b15:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
b16	sh.asm	/^     b16:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
b18	usertests.asm	/^     b18:	68 a0 83 00 00       	push   $0x83a0$/;"	l
b19	sh.asm	/^     b19:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
b1c	sh.asm	/^     b1c:	e8 87 fd ff ff       	call   8a8 <parseredirs>$/;"	l
b1d	usertests.asm	/^     b1d:	50                   	push   %eax$/;"	l
b1e	usertests.asm	/^     b1e:	e8 91 33 00 00       	call   3eb4 <read>$/;"	l
b2	echo.asm	/^  b2:	89 e5                	mov    %esp,%ebp$/;"	l
b2	grep.asm	/^  b2:	68 e0 0a 00 00       	push   $0xae0$/;"	l
b2	kill.asm	/^  b2:	ff 45 08             	incl   0x8(%ebp)$/;"	l
b2	ls.asm	/^  b2:	89 e5                	mov    %esp,%ebp$/;"	l
b2	mkdir.asm	/^  b2:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
b2	rm.asm	/^  b2:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
b21	sh.asm	/^     b21:	83 c4 10             	add    $0x10,%esp$/;"	l
b23	usertests.asm	/^     b23:	83 c4 10             	add    $0x10,%esp$/;"	l
b24	sh.asm	/^     b24:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b26	usertests.asm	/^     b26:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b27	sh.asm	/^     b27:	83 ec 04             	sub    $0x4,%esp$/;"	l
b29	usertests.asm	/^     b29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b2a	sh.asm	/^     b2a:	68 87 14 00 00       	push   $0x1487$/;"	l
b2d	usertests.asm	/^     b2d:	0f 8f 76 ff ff ff    	jg     aa9 <pipe1+0xf5>$/;"	l
b2f	sh.asm	/^     b2f:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b3	cat.asm	/^  b3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b3	ln.asm	/^  b3:	8a 00                	mov    (%eax),%al$/;"	l
b3	sh.asm	/^      b3:	79 1e                	jns    d3 <runcmd+0xd3>$/;"	l
b3	wc.asm	/^  b3:	68 ee 08 00 00       	push   $0x8ee$/;"	l
b3	zombie.asm	/^  b3:	89 d1                	mov    %edx,%ecx$/;"	l
b32	sh.asm	/^     b32:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
b33	usertests.asm	/^     b33:	81 7d e4 2d 14 00 00 	cmpl   $0x142d,-0x1c(%ebp)$/;"	l
b35	sh.asm	/^     b35:	e8 52 fb ff ff       	call   68c <peek>$/;"	l
b3a	sh.asm	/^     b3a:	83 c4 10             	add    $0x10,%esp$/;"	l
b3a	usertests.asm	/^     b3a:	74 1a                	je     b56 <pipe1+0x1a2>$/;"	l
b3c	usertests.asm	/^     b3c:	83 ec 04             	sub    $0x4,%esp$/;"	l
b3d	sh.asm	/^     b3d:	85 c0                	test   %eax,%eax$/;"	l
b3f	sh.asm	/^     b3f:	0f 84 5c ff ff ff    	je     aa1 <parseexec+0x67>$/;"	l
b3f	usertests.asm	/^     b3f:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
b4	echo.asm	/^  b4:	eb 06                	jmp    bc <strcmp+0xb>$/;"	l
b4	init.asm	/^  b4:	e8 b7 02 00 00       	call   370 <exec>$/;"	l
b4	ls.asm	/^  b4:	57                   	push   %edi$/;"	l
b42	usertests.asm	/^     b42:	68 51 48 00 00       	push   $0x4851$/;"	l
b45	sh.asm	/^     b45:	eb 01                	jmp    b48 <parseexec+0x10e>$/;"	l
b47	sh.asm	/^     b47:	90                   	nop$/;"	l
b47	usertests.asm	/^     b47:	6a 01                	push   $0x1$/;"	l
b48	sh.asm	/^     b48:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b49	usertests.asm	/^     b49:	e8 bd 34 00 00       	call   400b <printf>$/;"	l
b4b	sh.asm	/^     b4b:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b4e	sh.asm	/^     b4e:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
b4e	usertests.asm	/^     b4e:	83 c4 10             	add    $0x10,%esp$/;"	l
b5	kill.asm	/^  b5:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
b5	ln.asm	/^  b5:	84 c0                	test   %al,%al$/;"	l
b5	ls.asm	/^  b5:	56                   	push   %esi$/;"	l
b5	mkdir.asm	/^  b5:	90                   	nop$/;"	l
b5	rm.asm	/^  b5:	90                   	nop$/;"	l
b5	sh.asm	/^      b5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b5	zombie.asm	/^  b5:	29 c1                	sub    %eax,%ecx$/;"	l
b51	usertests.asm	/^     b51:	e8 46 33 00 00       	call   3e9c <exit>$/;"	l
b55	sh.asm	/^     b55:	00 $/;"	l
b56	sh.asm	/^     b56:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b56	usertests.asm	/^     b56:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b59	sh.asm	/^     b59:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b59	usertests.asm	/^     b59:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b5c	sh.asm	/^     b5c:	83 c2 08             	add    $0x8,%edx$/;"	l
b5c	usertests.asm	/^     b5c:	50                   	push   %eax$/;"	l
b5d	usertests.asm	/^     b5d:	e8 62 33 00 00       	call   3ec4 <close>$/;"	l
b5f	sh.asm	/^     b5f:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)$/;"	l
b6	cat.asm	/^  b6:	c1 e0 02             	shl    $0x2,%eax$/;"	l
b6	echo.asm	/^  b6:	ff 45 08             	incl   0x8(%ebp)$/;"	l
b6	forktest.asm	/^  b6:	ff 4d f4             	decl   -0xc(%ebp)$/;"	l
b6	ls.asm	/^  b6:	53                   	push   %ebx$/;"	l
b6	mkdir.asm	/^  b6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b6	rm.asm	/^  b6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b6	stressfs.asm	/^  b6:	eb 1d                	jmp    d5 <main+0xd5>$/;"	l
b6	usertests.asm	/^      b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b62	usertests.asm	/^     b62:	83 c4 10             	add    $0x10,%esp$/;"	l
b65	usertests.asm	/^     b65:	e8 3a 33 00 00       	call   3ea4 <wait>$/;"	l
b66	sh.asm	/^     b66:	00 $/;"	l
b67	sh.asm	/^     b67:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b6a	sh.asm	/^     b6a:	c9                   	leave  $/;"	l
b6a	usertests.asm	/^     b6a:	83 ec 08             	sub    $0x8,%esp$/;"	l
b6b	sh.asm	/^     b6b:	c3                   	ret    $/;"	l
b6c	sh.asm	/^     b6c:	55                   	push   %ebp$/;"	l
b6d	sh.asm	/^     b6d:	89 e5                	mov    %esp,%ebp$/;"	l
b6d	usertests.asm	/^     b6d:	68 68 48 00 00       	push   $0x4868$/;"	l
b6f	sh.asm	/^     b6f:	83 ec 28             	sub    $0x28,%esp$/;"	l
b7	grep.asm	/^  b7:	e8 46 04 00 00       	call   502 <memmove>$/;"	l
b7	ln.asm	/^  b7:	0f 95 c0             	setne  %al$/;"	l
b7	ls.asm	/^  b7:	81 ec 3c 02 00 00    	sub    $0x23c,%esp$/;"	l
b7	zombie.asm	/^  b7:	89 c8                	mov    %ecx,%eax$/;"	l
b72	sh.asm	/^     b72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
b72	usertests.asm	/^     b72:	6a 01                	push   $0x1$/;"	l
b74	usertests.asm	/^     b74:	e8 92 34 00 00       	call   400b <printf>$/;"	l
b76	sh.asm	/^     b76:	75 0a                	jne    b82 <nulterminate+0x16>$/;"	l
b78	sh.asm	/^     b78:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b79	usertests.asm	/^     b79:	83 c4 10             	add    $0x10,%esp$/;"	l
b7c	usertests.asm	/^     b7c:	eb 17                	jmp    b95 <pipe1+0x1e1>$/;"	l
b7d	sh.asm	/^     b7d:	e9 e3 00 00 00       	jmp    c65 <nulterminate+0xf9>$/;"	l
b7e	usertests.asm	/^     b7e:	83 ec 08             	sub    $0x8,%esp$/;"	l
b8	kill.asm	/^  b8:	84 c0                	test   %al,%al$/;"	l
b8	sh.asm	/^      b8:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
b8	stressfs.asm	/^  b8:	83 ec 04             	sub    $0x4,%esp$/;"	l
b8	wc.asm	/^  b8:	6a 01                	push   $0x1$/;"	l
b81	usertests.asm	/^     b81:	68 72 48 00 00       	push   $0x4872$/;"	l
b82	sh.asm	/^     b82:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b85	sh.asm	/^     b85:	8b 00                	mov    (%eax),%eax$/;"	l
b86	usertests.asm	/^     b86:	6a 01                	push   $0x1$/;"	l
b87	sh.asm	/^     b87:	83 f8 05             	cmp    $0x5,%eax$/;"	l
b88	usertests.asm	/^     b88:	e8 7e 34 00 00       	call   400b <printf>$/;"	l
b8a	sh.asm	/^     b8a:	0f 87 d2 00 00 00    	ja     c62 <nulterminate+0xf6>$/;"	l
b8d	usertests.asm	/^     b8d:	83 c4 10             	add    $0x10,%esp$/;"	l
b9	cat.asm	/^  b9:	03 43 04             	add    0x4(%ebx),%eax$/;"	l
b9	echo.asm	/^  b9:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
b9	forktest.asm	/^  b9:	eb 01                	jmp    bc <forktest+0x94>$/;"	l
b9	init.asm	/^  b9:	83 c4 10             	add    $0x10,%esp$/;"	l
b9	mkdir.asm	/^  b9:	8a 10                	mov    (%eax),%dl$/;"	l
b9	rm.asm	/^  b9:	8a 10                	mov    (%eax),%dl$/;"	l
b9	usertests.asm	/^      b9:	85 c0                	test   %eax,%eax$/;"	l
b9	zombie.asm	/^  b9:	c9                   	leave  $/;"	l
b90	sh.asm	/^     b90:	8b 04 85 8c 14 00 00 	mov    0x148c(,%eax,4),%eax$/;"	l
b90	usertests.asm	/^     b90:	e8 07 33 00 00       	call   3e9c <exit>$/;"	l
b95	usertests.asm	/^     b95:	c9                   	leave  $/;"	l
b96	usertests.asm	/^     b96:	c3                   	ret    $/;"	l
b97	sh.asm	/^     b97:	ff e0                	jmp    *%eax$/;"	l
b97	usertests.asm	/^     b97:	55                   	push   %ebp$/;"	l
b98	usertests.asm	/^     b98:	89 e5                	mov    %esp,%ebp$/;"	l
b99	sh.asm	/^     b99:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b9a	usertests.asm	/^     b9a:	83 ec 28             	sub    $0x28,%esp$/;"	l
b9c	sh.asm	/^     b9c:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b9d	usertests.asm	/^     b9d:	83 ec 08             	sub    $0x8,%esp$/;"	l
b9f	sh.asm	/^     b9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ba	kill.asm	/^  ba:	75 e2                	jne    9e <strcpy+0xd>$/;"	l
ba	ln.asm	/^  ba:	ff 45 08             	incl   0x8(%ebp)$/;"	l
ba	wc.asm	/^  ba:	e8 80 04 00 00       	call   53f <printf>$/;"	l
ba	zombie.asm	/^  ba:	c3                   	ret    $/;"	l
ba0	usertests.asm	/^     ba0:	68 81 48 00 00       	push   $0x4881$/;"	l
ba5	usertests.asm	/^     ba5:	6a 01                	push   $0x1$/;"	l
ba6	sh.asm	/^     ba6:	eb 13                	jmp    bbb <nulterminate+0x4f>$/;"	l
ba7	usertests.asm	/^     ba7:	e8 5f 34 00 00       	call   400b <printf>$/;"	l
ba8	sh.asm	/^     ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bab	sh.asm	/^     bab:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bac	usertests.asm	/^     bac:	83 c4 10             	add    $0x10,%esp$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bae	sh.asm	/^     bae:	83 c2 08             	add    $0x8,%edx$/;"	l
baf	usertests.asm	/^     baf:	e8 e0 32 00 00       	call   3e94 <fork>$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	forktest.asm	/^  bb:	90                   	nop$/;"	l
bb	mkdir.asm	/^  bb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bb	rm.asm	/^  bb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bb	sh.asm	/^      bb:	83 ec 04             	sub    $0x4,%esp$/;"	l
bb	stressfs.asm	/^  bb:	68 00 02 00 00       	push   $0x200$/;"	l
bb	usertests.asm	/^      bb:	79 1b                	jns    d8 <iputtest+0xd8>$/;"	l
bb	zombie.asm	/^  bb:	55                   	push   %ebp$/;"	l
bb1	sh.asm	/^     bb1:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax$/;"	l
bb4	usertests.asm	/^     bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
bb5	sh.asm	/^     bb5:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
bb7	usertests.asm	/^     bb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bb8	sh.asm	/^     bb8:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
bbb	sh.asm	/^     bbb:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bbb	usertests.asm	/^     bbb:	75 02                	jne    bbf <preempt+0x28>$/;"	l
bbd	usertests.asm	/^     bbd:	eb fe                	jmp    bbd <preempt+0x26>$/;"	l
bbe	sh.asm	/^     bbe:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bbf	usertests.asm	/^     bbf:	e8 d0 32 00 00       	call   3e94 <fork>$/;"	l
bc	cat.asm	/^  bc:	8b 00                	mov    (%eax),%eax$/;"	l
bc	echo.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc	forktest.asm	/^  bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bc	grep.asm	/^  bc:	83 c4 10             	add    $0x10,%esp$/;"	l
bc	init.asm	/^  bc:	83 ec 08             	sub    $0x8,%esp$/;"	l
bc	kill.asm	/^  bc:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
bc	zombie.asm	/^  bc:	89 e5                	mov    %esp,%ebp$/;"	l
bc1	sh.asm	/^     bc1:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax$/;"	l
bc4	usertests.asm	/^     bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bc5	sh.asm	/^     bc5:	85 c0                	test   %eax,%eax$/;"	l
bc7	sh.asm	/^     bc7:	75 df                	jne    ba8 <nulterminate+0x3c>$/;"	l
bc7	usertests.asm	/^     bc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
bc9	sh.asm	/^     bc9:	e9 94 00 00 00       	jmp    c62 <nulterminate+0xf6>$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon3
bcb	usertests.asm	/^     bcb:	75 02                	jne    bcf <preempt+0x38>$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	usertests.asm	/^     bcd:	eb fe                	jmp    bcd <preempt+0x36>$/;"	l
bce	sh.asm	/^     bce:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bcf	usertests.asm	/^     bcf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bcpu	kernel.asm	/^        bcpu = &cpus[ncpu];$/;"	d
bcpu	kernel.asm	/^  bcpu = &cpus[0];$/;"	d
bcpu	mp.c	/^static struct cpu *bcpu;$/;"	v	typeref:struct:cpu	file:
bd	ln.asm	/^  bd:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
bd	ls.asm	/^  bd:	83 ec 08             	sub    $0x8,%esp$/;"	l
bd	usertests.asm	/^      bd:	a1 ac 5b 00 00       	mov    0x5bac,%eax$/;"	l
bd1	sh.asm	/^     bd1:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
bd2	usertests.asm	/^     bd2:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
bd4	sh.asm	/^     bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
bd5	usertests.asm	/^     bd5:	50                   	push   %eax$/;"	l
bd6	usertests.asm	/^     bd6:	e8 d1 32 00 00       	call   3eac <pipe>$/;"	l
bd7	sh.asm	/^     bd7:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	sh.asm	/^     bda:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bdb	usertests.asm	/^     bdb:	83 c4 10             	add    $0x10,%esp$/;"	l
bdd	sh.asm	/^     bdd:	50                   	push   %eax$/;"	l
bde	sh.asm	/^     bde:	e8 89 ff ff ff       	call   b6c <nulterminate>$/;"	l
bde	usertests.asm	/^     bde:	e8 b1 32 00 00       	call   3e94 <fork>$/;"	l
be	cat.asm	/^  be:	83 ec 04             	sub    $0x4,%esp$/;"	l
be	mkdir.asm	/^  be:	88 10                	mov    %dl,(%eax)$/;"	l
be	rm.asm	/^  be:	88 10                	mov    %dl,(%eax)$/;"	l
be	sh.asm	/^      be:	50                   	push   %eax$/;"	l
be	zombie.asm	/^  be:	83 ec 10             	sub    $0x10,%esp$/;"	l
be3	sh.asm	/^     be3:	83 c4 10             	add    $0x10,%esp$/;"	l
be3	usertests.asm	/^     be3:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
be6	sh.asm	/^     be6:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
be6	usertests.asm	/^     be6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
be9	sh.asm	/^     be9:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
bea	usertests.asm	/^     bea:	75 4d                	jne    c39 <preempt+0xa2>$/;"	l
bec	sh.asm	/^     bec:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
bec	usertests.asm	/^     bec:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bef	sh.asm	/^     bef:	eb 71                	jmp    c62 <nulterminate+0xf6>$/;"	l
bef	usertests.asm	/^     bef:	83 ec 0c             	sub    $0xc,%esp$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	echo.asm	/^  bf:	8a 00                	mov    (%eax),%al$/;"	l
bf	grep.asm	/^  bf:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
bf	init.asm	/^  bf:	68 81 08 00 00       	push   $0x881$/;"	l
bf	kill.asm	/^  bf:	c9                   	leave  $/;"	l
bf	sh.asm	/^      bf:	68 cb 13 00 00       	push   $0x13cb$/;"	l
bf	wc.asm	/^  bf:	83 c4 10             	add    $0x10,%esp$/;"	l
bf1	sh.asm	/^     bf1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bf2	usertests.asm	/^     bf2:	50                   	push   %eax$/;"	l
bf3	usertests.asm	/^     bf3:	e8 cc 32 00 00       	call   3ec4 <close>$/;"	l
bf4	sh.asm	/^     bf4:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
bf7	sh.asm	/^     bf7:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bf8	usertests.asm	/^     bf8:	83 c4 10             	add    $0x10,%esp$/;"	l
bfa	sh.asm	/^     bfa:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
bfb	usertests.asm	/^     bfb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bfd	sh.asm	/^     bfd:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bfe	usertests.asm	/^     bfe:	83 ec 04             	sub    $0x4,%esp$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint sector)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
bitblocks	mkfs.c	/^uint bitblocks;$/;"	v
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb.ninodes));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint sector)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon3	typeref:struct:__anon3::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon7	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 92 01 00 00       	call   1a3 <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	e8 8b 0e 00 00       	call   e9c <exit>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	forktest.asm	/^  c0:	7f d4                	jg     96 <forktest+0x6e>$/;"	l
c0	kill.asm	/^  c0:	c3                   	ret    $/;"	l
c0	ln.asm	/^  c0:	84 c0                	test   %al,%al$/;"	l
c0	ls.asm	/^  c0:	6a 00                	push   $0x0$/;"	l
c0	mkdir.asm	/^  c0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0	rm.asm	/^  c0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0	stressfs.asm	/^  c0:	8d 85 d6 fd ff ff    	lea    -0x22a(%ebp),%eax$/;"	l
c00	sh.asm	/^     c00:	50                   	push   %eax$/;"	l
c01	sh.asm	/^     c01:	e8 66 ff ff ff       	call   b6c <nulterminate>$/;"	l
c01	usertests.asm	/^     c01:	6a 01                	push   $0x1$/;"	l
c03	usertests.asm	/^     c03:	68 8b 48 00 00       	push   $0x488b$/;"	l
c06	sh.asm	/^     c06:	83 c4 10             	add    $0x10,%esp$/;"	l
c08	usertests.asm	/^     c08:	50                   	push   %eax$/;"	l
c09	sh.asm	/^     c09:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c09	usertests.asm	/^     c09:	e8 ae 32 00 00       	call   3ebc <write>$/;"	l
c0c	sh.asm	/^     c0c:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c0e	usertests.asm	/^     c0e:	83 c4 10             	add    $0x10,%esp$/;"	l
c0f	sh.asm	/^     c0f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c1	cat.asm	/^  c1:	50                   	push   %eax$/;"	l
c1	echo.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	kill.asm	/^  c1:	55                   	push   %ebp$/;"	l
c1	zombie.asm	/^  c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
c11	usertests.asm	/^     c11:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c12	sh.asm	/^     c12:	50                   	push   %eax$/;"	l
c13	sh.asm	/^     c13:	e8 54 ff ff ff       	call   b6c <nulterminate>$/;"	l
c14	usertests.asm	/^     c14:	74 12                	je     c28 <preempt+0x91>$/;"	l
c16	usertests.asm	/^     c16:	83 ec 08             	sub    $0x8,%esp$/;"	l
c18	sh.asm	/^     c18:	83 c4 10             	add    $0x10,%esp$/;"	l
c19	usertests.asm	/^     c19:	68 8d 48 00 00       	push   $0x488d$/;"	l
c1b	sh.asm	/^     c1b:	eb 45                	jmp    c62 <nulterminate+0xf6>$/;"	l
c1d	sh.asm	/^     c1d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c1e	usertests.asm	/^     c1e:	6a 01                	push   $0x1$/;"	l
c2	cat.asm	/^  c2:	68 61 08 00 00       	push   $0x861$/;"	l
c2	forktest.asm	/^  c2:	e8 89 02 00 00       	call   350 <wait>$/;"	l
c2	grep.asm	/^  c2:	ba 00 04 00 00       	mov    $0x400,%edx$/;"	l
c2	kill.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c2	ln.asm	/^  c2:	75 e2                	jne    a6 <strcpy+0xd>$/;"	l
c2	ls.asm	/^  c2:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
c2	usertests.asm	/^      c2:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2	wc.asm	/^  c2:	e8 09 03 00 00       	call   3d0 <exit>$/;"	l
c20	sh.asm	/^     c20:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
c20	usertests.asm	/^     c20:	e8 e6 33 00 00       	call   400b <printf>$/;"	l
c23	sh.asm	/^     c23:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c25	usertests.asm	/^     c25:	83 c4 10             	add    $0x10,%esp$/;"	l
c26	sh.asm	/^     c26:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c28	usertests.asm	/^     c28:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c29	sh.asm	/^     c29:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c2b	usertests.asm	/^     c2b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c2c	sh.asm	/^     c2c:	50                   	push   %eax$/;"	l
c2d	sh.asm	/^     c2d:	e8 3a ff ff ff       	call   b6c <nulterminate>$/;"	l
c2e	usertests.asm	/^     c2e:	50                   	push   %eax$/;"	l
c2f	usertests.asm	/^     c2f:	e8 90 32 00 00       	call   3ec4 <close>$/;"	l
c3	echo.asm	/^  c3:	74 0e                	je     d3 <strcmp+0x22>$/;"	l
c3	mkdir.asm	/^  c3:	8a 00                	mov    (%eax),%al$/;"	l
c3	rm.asm	/^  c3:	8a 00                	mov    (%eax),%al$/;"	l
c32	sh.asm	/^     c32:	83 c4 10             	add    $0x10,%esp$/;"	l
c34	usertests.asm	/^     c34:	83 c4 10             	add    $0x10,%esp$/;"	l
c35	sh.asm	/^     c35:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c37	usertests.asm	/^     c37:	eb fe                	jmp    c37 <preempt+0xa0>$/;"	l
c38	sh.asm	/^     c38:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c39	usertests.asm	/^     c39:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c3b	sh.asm	/^     c3b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c3c	usertests.asm	/^     c3c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c3e	sh.asm	/^     c3e:	50                   	push   %eax$/;"	l
c3f	sh.asm	/^     c3f:	e8 28 ff ff ff       	call   b6c <nulterminate>$/;"	l
c3f	usertests.asm	/^     c3f:	50                   	push   %eax$/;"	l
c4	init.asm	/^  c4:	6a 01                	push   $0x1$/;"	l
c4	kill.asm	/^  c4:	eb 06                	jmp    cc <strcmp+0xb>$/;"	l
c4	ln.asm	/^  c4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c4	sh.asm	/^      c4:	6a 02                	push   $0x2$/;"	l
c40	usertests.asm	/^     c40:	e8 7f 32 00 00       	call   3ec4 <close>$/;"	l
c44	sh.asm	/^     c44:	83 c4 10             	add    $0x10,%esp$/;"	l
c45	usertests.asm	/^     c45:	83 c4 10             	add    $0x10,%esp$/;"	l
c47	sh.asm	/^     c47:	eb 19                	jmp    c62 <nulterminate+0xf6>$/;"	l
c48	usertests.asm	/^     c48:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c49	sh.asm	/^     c49:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c4b	usertests.asm	/^     c4b:	83 ec 04             	sub    $0x4,%esp$/;"	l
c4c	sh.asm	/^     c4c:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
c4e	usertests.asm	/^     c4e:	68 00 20 00 00       	push   $0x2000$/;"	l
c4f	sh.asm	/^     c4f:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
c5	echo.asm	/^  c5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c5	ls.asm	/^  c5:	e8 e2 04 00 00       	call   5ac <open>$/;"	l
c5	mkdir.asm	/^  c5:	84 c0                	test   %al,%al$/;"	l
c5	rm.asm	/^  c5:	84 c0                	test   %al,%al$/;"	l
c5	usertests.asm	/^      c5:	68 28 44 00 00       	push   $0x4428$/;"	l
c52	sh.asm	/^     c52:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c53	usertests.asm	/^     c53:	68 a0 83 00 00       	push   $0x83a0$/;"	l
c55	sh.asm	/^     c55:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c58	sh.asm	/^     c58:	50                   	push   %eax$/;"	l
c58	usertests.asm	/^     c58:	50                   	push   %eax$/;"	l
c59	sh.asm	/^     c59:	e8 0e ff ff ff       	call   b6c <nulterminate>$/;"	l
c59	usertests.asm	/^     c59:	e8 56 32 00 00       	call   3eb4 <read>$/;"	l
c5e	sh.asm	/^     c5e:	83 c4 10             	add    $0x10,%esp$/;"	l
c5e	usertests.asm	/^     c5e:	83 c4 10             	add    $0x10,%esp$/;"	l
c6	init.asm	/^  c6:	e8 dc 03 00 00       	call   4a7 <printf>$/;"	l
c6	kill.asm	/^  c6:	ff 45 08             	incl   0x8(%ebp)$/;"	l
c6	sh.asm	/^      c6:	e8 40 0f 00 00       	call   100b <printf>$/;"	l
c6	stressfs.asm	/^  c6:	50                   	push   %eax$/;"	l
c61	sh.asm	/^     c61:	90                   	nop$/;"	l
c61	usertests.asm	/^     c61:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c62	sh.asm	/^     c62:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c64	usertests.asm	/^     c64:	74 14                	je     c7a <preempt+0xe3>$/;"	l
c65	sh.asm	/^     c65:	c9                   	leave  $/;"	l
c66	sh.asm	/^     c66:	c3                   	ret    $/;"	l
c66	usertests.asm	/^     c66:	83 ec 08             	sub    $0x8,%esp$/;"	l
c67	sh.asm	/^     c67:	90                   	nop$/;"	l
c68	sh.asm	/^     c68:	55                   	push   %ebp$/;"	l
c69	sh.asm	/^     c69:	89 e5                	mov    %esp,%ebp$/;"	l
c69	usertests.asm	/^     c69:	68 a1 48 00 00       	push   $0x48a1$/;"	l
c6b	sh.asm	/^     c6b:	57                   	push   %edi$/;"	l
c6c	sh.asm	/^     c6c:	53                   	push   %ebx$/;"	l
c6d	sh.asm	/^     c6d:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c6e	usertests.asm	/^     c6e:	6a 01                	push   $0x1$/;"	l
c7	cat.asm	/^  c7:	6a 01                	push   $0x1$/;"	l
c7	forktest.asm	/^  c7:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
c7	grep.asm	/^  c7:	89 d1                	mov    %edx,%ecx$/;"	l
c7	ln.asm	/^  c7:	c9                   	leave  $/;"	l
c7	mkdir.asm	/^  c7:	0f 95 c0             	setne  %al$/;"	l
c7	rm.asm	/^  c7:	0f 95 c0             	setne  %al$/;"	l
c7	stressfs.asm	/^  c7:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
c7	wc.asm	/^  c7:	83 ec 08             	sub    $0x8,%esp$/;"	l
c70	sh.asm	/^     c70:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
c70	usertests.asm	/^     c70:	e8 96 33 00 00       	call   400b <printf>$/;"	l
c73	sh.asm	/^     c73:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c75	usertests.asm	/^     c75:	83 c4 10             	add    $0x10,%esp$/;"	l
c76	sh.asm	/^     c76:	89 cb                	mov    %ecx,%ebx$/;"	l
c78	sh.asm	/^     c78:	89 df                	mov    %ebx,%edi$/;"	l
c78	usertests.asm	/^     c78:	eb 7e                	jmp    cf8 <preempt+0x161>$/;"	l
c7a	sh.asm	/^     c7a:	89 d1                	mov    %edx,%ecx$/;"	l
c7a	usertests.asm	/^     c7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c7c	sh.asm	/^     c7c:	fc                   	cld    $/;"	l
c7d	sh.asm	/^     c7d:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
c7d	usertests.asm	/^     c7d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c7f	sh.asm	/^     c7f:	89 ca                	mov    %ecx,%edx$/;"	l
c8	echo.asm	/^  c8:	8a 10                	mov    (%eax),%dl$/;"	l
c8	ln.asm	/^  c8:	c3                   	ret    $/;"	l
c8	zombie.asm	/^  c8:	eb 03                	jmp    cd <strlen+0x12>$/;"	l
c80	usertests.asm	/^     c80:	50                   	push   %eax$/;"	l
c81	sh.asm	/^     c81:	89 fb                	mov    %edi,%ebx$/;"	l
c81	usertests.asm	/^     c81:	e8 3e 32 00 00       	call   3ec4 <close>$/;"	l
c83	sh.asm	/^     c83:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
c86	sh.asm	/^     c86:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
c86	usertests.asm	/^     c86:	83 c4 10             	add    $0x10,%esp$/;"	l
c89	sh.asm	/^     c89:	5b                   	pop    %ebx$/;"	l
c89	usertests.asm	/^     c89:	83 ec 08             	sub    $0x8,%esp$/;"	l
c8a	sh.asm	/^     c8a:	5f                   	pop    %edi$/;"	l
c8b	sh.asm	/^     c8b:	c9                   	leave  $/;"	l
c8c	sh.asm	/^     c8c:	c3                   	ret    $/;"	l
c8c	usertests.asm	/^     c8c:	68 b4 48 00 00       	push   $0x48b4$/;"	l
c8d	sh.asm	/^     c8d:	55                   	push   %ebp$/;"	l
c8e	sh.asm	/^     c8e:	89 e5                	mov    %esp,%ebp$/;"	l
c9	cat.asm	/^  c9:	e8 d9 03 00 00       	call   4a7 <printf>$/;"	l
c9	grep.asm	/^  c9:	29 c1                	sub    %eax,%ecx$/;"	l
c9	kill.asm	/^  c9:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
c9	ln.asm	/^  c9:	55                   	push   %ebp$/;"	l
c90	sh.asm	/^     c90:	83 ec 10             	sub    $0x10,%esp$/;"	l
c91	usertests.asm	/^     c91:	6a 01                	push   $0x1$/;"	l
c93	sh.asm	/^     c93:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c93	usertests.asm	/^     c93:	e8 73 33 00 00       	call   400b <printf>$/;"	l
c96	sh.asm	/^     c96:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
c98	usertests.asm	/^     c98:	83 c4 10             	add    $0x10,%esp$/;"	l
c99	sh.asm	/^     c99:	90                   	nop$/;"	l
c9a	sh.asm	/^     c9a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c9b	usertests.asm	/^     c9b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c9d	sh.asm	/^     c9d:	8a 10                	mov    (%eax),%dl$/;"	l
c9e	usertests.asm	/^     c9e:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
c9f	sh.asm	/^     c9f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ca	echo.asm	/^  ca:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ca	forktest.asm	/^  ca:	74 17                	je     e3 <forktest+0xbb>$/;"	l
ca	ln.asm	/^  ca:	89 e5                	mov    %esp,%ebp$/;"	l
ca	ls.asm	/^  ca:	83 c4 10             	add    $0x10,%esp$/;"	l
ca	mkdir.asm	/^  ca:	ff 45 08             	incl   0x8(%ebp)$/;"	l
ca	rm.asm	/^  ca:	ff 45 08             	incl   0x8(%ebp)$/;"	l
ca	stressfs.asm	/^  ca:	e8 d9 02 00 00       	call   3a8 <write>$/;"	l
ca	usertests.asm	/^      ca:	50                   	push   %eax$/;"	l
ca	wc.asm	/^  ca:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
ca	zombie.asm	/^  ca:	ff 45 fc             	incl   -0x4(%ebp)$/;"	l
ca1	usertests.asm	/^     ca1:	e8 26 32 00 00       	call   3ecc <kill>$/;"	l
ca2	sh.asm	/^     ca2:	88 10                	mov    %dl,(%eax)$/;"	l
ca4	sh.asm	/^     ca4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ca6	usertests.asm	/^     ca6:	83 c4 10             	add    $0x10,%esp$/;"	l
ca7	sh.asm	/^     ca7:	8a 00                	mov    (%eax),%al$/;"	l
ca9	sh.asm	/^     ca9:	84 c0                	test   %al,%al$/;"	l
ca9	usertests.asm	/^     ca9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cab	sh.asm	/^     cab:	0f 95 c0             	setne  %al$/;"	l
cac	usertests.asm	/^     cac:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
cae	sh.asm	/^     cae:	ff 45 08             	incl   0x8(%ebp)$/;"	l
caf	usertests.asm	/^     caf:	e8 18 32 00 00       	call   3ecc <kill>$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	grep.asm	/^  cb:	89 c8                	mov    %ecx,%eax$/;"	l
cb	init.asm	/^  cb:	83 c4 10             	add    $0x10,%esp$/;"	l
cb	sh.asm	/^      cb:	83 c4 10             	add    $0x10,%esp$/;"	l
cb	usertests.asm	/^      cb:	e8 3b 3f 00 00       	call   400b <printf>$/;"	l
cb1	sh.asm	/^     cb1:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
cb4	sh.asm	/^     cb4:	84 c0                	test   %al,%al$/;"	l
cb4	usertests.asm	/^     cb4:	83 c4 10             	add    $0x10,%esp$/;"	l
cb6	sh.asm	/^     cb6:	75 e2                	jne    c9a <strcpy+0xd>$/;"	l
cb7	usertests.asm	/^     cb7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cb8	sh.asm	/^     cb8:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cba	usertests.asm	/^     cba:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
cbb	sh.asm	/^     cbb:	c9                   	leave  $/;"	l
cbc	sh.asm	/^     cbc:	c3                   	ret    $/;"	l
cbd	sh.asm	/^     cbd:	55                   	push   %ebp$/;"	l
cbd	usertests.asm	/^     cbd:	e8 0a 32 00 00       	call   3ecc <kill>$/;"	l
cbe	sh.asm	/^     cbe:	89 e5                	mov    %esp,%ebp$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	83 ec 08             	sub    $0x8,%esp$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	eb 06                	jmp    d4 <strcmp+0xb>$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	sh.asm	/^     cc0:	eb 06                	jmp    cc8 <strcmp+0xb>$/;"	l
cc2	sh.asm	/^     cc2:	ff 45 08             	incl   0x8(%ebp)$/;"	l
cc2	usertests.asm	/^     cc2:	83 c4 10             	add    $0x10,%esp$/;"	l
cc5	sh.asm	/^     cc5:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
cc5	usertests.asm	/^     cc5:	83 ec 08             	sub    $0x8,%esp$/;"	l
cc8	sh.asm	/^     cc8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cc8	usertests.asm	/^     cc8:	68 bd 48 00 00       	push   $0x48bd$/;"	l
ccb	sh.asm	/^     ccb:	8a 00                	mov    (%eax),%al$/;"	l
ccd	sh.asm	/^     ccd:	84 c0                	test   %al,%al$/;"	l
ccd	usertests.asm	/^     ccd:	6a 01                	push   $0x1$/;"	l
ccf	sh.asm	/^     ccf:	74 0e                	je     cdf <strcmp+0x22>$/;"	l
ccf	usertests.asm	/^     ccf:	e8 37 33 00 00       	call   400b <printf>$/;"	l
cd	echo.asm	/^  cd:	8a 00                	mov    (%eax),%al$/;"	l
cd	grep.asm	/^  cd:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
cd	ls.asm	/^  cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
cd	mkdir.asm	/^  cd:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
cd	rm.asm	/^  cd:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
cd	wc.asm	/^  cd:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
cd	zombie.asm	/^  cd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
cd1	sh.asm	/^     cd1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cd4	sh.asm	/^     cd4:	8a 10                	mov    (%eax),%dl$/;"	l
cd4	usertests.asm	/^     cd4:	83 c4 10             	add    $0x10,%esp$/;"	l
cd6	sh.asm	/^     cd6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
cd7	usertests.asm	/^     cd7:	e8 c8 31 00 00       	call   3ea4 <wait>$/;"	l
cd9	sh.asm	/^     cd9:	8a 00                	mov    (%eax),%al$/;"	l
cdb	sh.asm	/^     cdb:	38 c2                	cmp    %al,%dl$/;"	l
cdc	usertests.asm	/^     cdc:	e8 c3 31 00 00       	call   3ea4 <wait>$/;"	l
cdd	sh.asm	/^     cdd:	74 e3                	je     cc2 <strcmp+0x5>$/;"	l
cdf	sh.asm	/^     cdf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce	cat.asm	/^  ce:	83 c4 10             	add    $0x10,%esp$/;"	l
ce	init.asm	/^  ce:	e8 65 02 00 00       	call   338 <exit>$/;"	l
ce	ln.asm	/^  ce:	ff 45 08             	incl   0x8(%ebp)$/;"	l
ce	sh.asm	/^      ce:	e8 c9 0d 00 00       	call   e9c <exit>$/;"	l
ce1	usertests.asm	/^     ce1:	e8 be 31 00 00       	call   3ea4 <wait>$/;"	l
ce2	sh.asm	/^     ce2:	8a 00                	mov    (%eax),%al$/;"	l
ce4	sh.asm	/^     ce4:	0f b6 d0             	movzbl %al,%edx$/;"	l
ce6	usertests.asm	/^     ce6:	83 ec 08             	sub    $0x8,%esp$/;"	l
ce7	sh.asm	/^     ce7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ce9	usertests.asm	/^     ce9:	68 c6 48 00 00       	push   $0x48c6$/;"	l
cea	sh.asm	/^     cea:	8a 00                	mov    (%eax),%al$/;"	l
cec	sh.asm	/^     cec:	0f b6 c0             	movzbl %al,%eax$/;"	l
cee	usertests.asm	/^     cee:	6a 01                	push   $0x1$/;"	l
cef	sh.asm	/^     cef:	89 d1                	mov    %edx,%ecx$/;"	l
cf	echo.asm	/^  cf:	38 c2                	cmp    %al,%dl$/;"	l
cf	forktest.asm	/^  cf:	68 27 04 00 00       	push   $0x427$/;"	l
cf	kill.asm	/^  cf:	8a 00                	mov    (%eax),%al$/;"	l
cf	stressfs.asm	/^  cf:	83 c4 10             	add    $0x10,%esp$/;"	l
cf0	usertests.asm	/^     cf0:	e8 16 33 00 00       	call   400b <printf>$/;"	l
cf1	sh.asm	/^     cf1:	29 c1                	sub    %eax,%ecx$/;"	l
cf3	sh.asm	/^     cf3:	89 c8                	mov    %ecx,%eax$/;"	l
cf5	sh.asm	/^     cf5:	c9                   	leave  $/;"	l
cf5	usertests.asm	/^     cf5:	83 c4 10             	add    $0x10,%esp$/;"	l
cf6	sh.asm	/^     cf6:	c3                   	ret    $/;"	l
cf7	sh.asm	/^     cf7:	55                   	push   %ebp$/;"	l
cf8	sh.asm	/^     cf8:	89 e5                	mov    %esp,%ebp$/;"	l
cf8	usertests.asm	/^     cf8:	c9                   	leave  $/;"	l
cf9	usertests.asm	/^     cf9:	c3                   	ret    $/;"	l
cfa	sh.asm	/^     cfa:	83 ec 10             	sub    $0x10,%esp$/;"	l
cfa	usertests.asm	/^     cfa:	55                   	push   %ebp$/;"	l
cfb	usertests.asm	/^     cfb:	89 e5                	mov    %esp,%ebp$/;"	l
cfd	sh.asm	/^     cfd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
cfd	usertests.asm	/^     cfd:	83 ec 18             	sub    $0x18,%esp$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = p2v(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) p2v((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon6	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^  struct cpu *cpu;$/;"	m	struct:cpu	typeref:struct:cpu::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	echo.asm	/^   d:	53                   	push   %ebx$/;"	l
d	grep.asm	/^   d:	e9 ad 00 00 00       	jmp    bf <grep+0xbf>$/;"	l
d	init.asm	/^   d:	51                   	push   %ecx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ln.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ls.asm	/^   d:	e8 b5 03 00 00       	call   3c7 <strlen>$/;"	l
d	mkdir.asm	/^   d:	53                   	push   %ebx$/;"	l
d	rm.asm	/^   d:	53                   	push   %ebx$/;"	l
d	stressfs.asm	/^   d:	57                   	push   %edi$/;"	l
d	wc.asm	/^   d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	grep.asm	/^  d0:	81 c2 e0 0a 00 00    	add    $0xae0,%edx$/;"	l
d0	ls.asm	/^  d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d0	mkdir.asm	/^  d0:	84 c0                	test   %al,%al$/;"	l
d0	rm.asm	/^  d0:	84 c0                	test   %al,%al$/;"	l
d0	usertests.asm	/^      d0:	83 c4 10             	add    $0x10,%esp$/;"	l
d0	wc.asm	/^  d0:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
d0	zombie.asm	/^  d0:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
d00	usertests.asm	/^     d00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d04	sh.asm	/^     d04:	eb 03                	jmp    d09 <strlen+0x12>$/;"	l
d06	sh.asm	/^     d06:	ff 45 fc             	incl   -0x4(%ebp)$/;"	l
d07	usertests.asm	/^     d07:	eb 4e                	jmp    d57 <exitwait+0x5d>$/;"	l
d09	sh.asm	/^     d09:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d09	usertests.asm	/^     d09:	e8 86 31 00 00       	call   3e94 <fork>$/;"	l
d0c	sh.asm	/^     d0c:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
d0e	usertests.asm	/^     d0e:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d0f	sh.asm	/^     d0f:	8a 00                	mov    (%eax),%al$/;"	l
d1	cat.asm	/^  d1:	e8 62 02 00 00       	call   338 <exit>$/;"	l
d1	echo.asm	/^  d1:	74 e3                	je     b6 <strcmp+0x5>$/;"	l
d1	kill.asm	/^  d1:	84 c0                	test   %al,%al$/;"	l
d1	ln.asm	/^  d1:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
d11	sh.asm	/^     d11:	84 c0                	test   %al,%al$/;"	l
d11	usertests.asm	/^     d11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d13	sh.asm	/^     d13:	75 f1                	jne    d06 <strlen+0xf>$/;"	l
d15	sh.asm	/^     d15:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d15	usertests.asm	/^     d15:	79 14                	jns    d2b <exitwait+0x31>$/;"	l
d17	usertests.asm	/^     d17:	83 ec 08             	sub    $0x8,%esp$/;"	l
d18	sh.asm	/^     d18:	c9                   	leave  $/;"	l
d19	sh.asm	/^     d19:	c3                   	ret    $/;"	l
d1a	sh.asm	/^     d1a:	55                   	push   %ebp$/;"	l
d1a	usertests.asm	/^     d1a:	68 55 44 00 00       	push   $0x4455$/;"	l
d1b	sh.asm	/^     d1b:	89 e5                	mov    %esp,%ebp$/;"	l
d1d	sh.asm	/^     d1d:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
d1f	usertests.asm	/^     d1f:	6a 01                	push   $0x1$/;"	l
d2	mkdir.asm	/^  d2:	75 e2                	jne    b6 <strcpy+0xd>$/;"	l
d2	rm.asm	/^  d2:	75 e2                	jne    b6 <strcpy+0xd>$/;"	l
d2	stressfs.asm	/^  d2:	ff 45 e4             	incl   -0x1c(%ebp)$/;"	l
d20	sh.asm	/^     d20:	50                   	push   %eax$/;"	l
d21	sh.asm	/^     d21:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
d21	usertests.asm	/^     d21:	e8 e5 32 00 00       	call   400b <printf>$/;"	l
d24	sh.asm	/^     d24:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
d26	usertests.asm	/^     d26:	83 c4 10             	add    $0x10,%esp$/;"	l
d27	sh.asm	/^     d27:	e8 3c ff ff ff       	call   c68 <stosb>$/;"	l
d29	usertests.asm	/^     d29:	eb 44                	jmp    d6f <exitwait+0x75>$/;"	l
d2b	usertests.asm	/^     d2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d2c	sh.asm	/^     d2c:	83 c4 0c             	add    $0xc,%esp$/;"	l
d2f	sh.asm	/^     d2f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2f	usertests.asm	/^     d2f:	74 1e                	je     d4f <exitwait+0x55>$/;"	l
d3	echo.asm	/^  d3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d3	init.asm	/^  d3:	83 ec 08             	sub    $0x8,%esp$/;"	l
d3	kill.asm	/^  d3:	74 0e                	je     e3 <strcmp+0x22>$/;"	l
d3	sh.asm	/^      d3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d3	usertests.asm	/^      d3:	e8 c4 3d 00 00       	call   3e9c <exit>$/;"	l
d3	wc.asm	/^  d3:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
d3	zombie.asm	/^  d3:	8a 00                	mov    (%eax),%al$/;"	l
d31	usertests.asm	/^     d31:	e8 6e 31 00 00       	call   3ea4 <wait>$/;"	l
d32	sh.asm	/^     d32:	c9                   	leave  $/;"	l
d33	sh.asm	/^     d33:	c3                   	ret    $/;"	l
d34	sh.asm	/^     d34:	55                   	push   %ebp$/;"	l
d35	sh.asm	/^     d35:	89 e5                	mov    %esp,%ebp$/;"	l
d36	usertests.asm	/^     d36:	3b 45 f0             	cmp    -0x10(%ebp),%eax$/;"	l
d37	sh.asm	/^     d37:	83 ec 04             	sub    $0x4,%esp$/;"	l
d39	usertests.asm	/^     d39:	74 19                	je     d54 <exitwait+0x5a>$/;"	l
d3a	sh.asm	/^     d3a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d3b	usertests.asm	/^     d3b:	83 ec 08             	sub    $0x8,%esp$/;"	l
d3d	sh.asm	/^     d3d:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
d3e	usertests.asm	/^     d3e:	68 d2 48 00 00       	push   $0x48d2$/;"	l
d4	forktest.asm	/^  d4:	6a 01                	push   $0x1$/;"	l
d4	ln.asm	/^  d4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4	ls.asm	/^  d4:	79 1a                	jns    f0 <ls+0x3f>$/;"	l
d4	mkdir.asm	/^  d4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d4	rm.asm	/^  d4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d40	sh.asm	/^     d40:	eb 12                	jmp    d54 <strchr+0x20>$/;"	l
d42	sh.asm	/^     d42:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d43	usertests.asm	/^     d43:	6a 01                	push   $0x1$/;"	l
d45	sh.asm	/^     d45:	8a 00                	mov    (%eax),%al$/;"	l
d45	usertests.asm	/^     d45:	e8 c1 32 00 00       	call   400b <printf>$/;"	l
d47	sh.asm	/^     d47:	3a 45 fc             	cmp    -0x4(%ebp),%al$/;"	l
d4a	sh.asm	/^     d4a:	75 05                	jne    d51 <strchr+0x1d>$/;"	l
d4a	usertests.asm	/^     d4a:	83 c4 10             	add    $0x10,%esp$/;"	l
d4c	sh.asm	/^     d4c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4d	usertests.asm	/^     d4d:	eb 20                	jmp    d6f <exitwait+0x75>$/;"	l
d4f	sh.asm	/^     d4f:	eb 11                	jmp    d62 <strchr+0x2e>$/;"	l
d4f	usertests.asm	/^     d4f:	e8 48 31 00 00       	call   3e9c <exit>$/;"	l
d5	kill.asm	/^  d5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d5	stressfs.asm	/^  d5:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)$/;"	l
d5	zombie.asm	/^  d5:	84 c0                	test   %al,%al$/;"	l
d51	sh.asm	/^     d51:	ff 45 08             	incl   0x8(%ebp)$/;"	l
d54	sh.asm	/^     d54:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d54	usertests.asm	/^     d54:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
d57	sh.asm	/^     d57:	8a 00                	mov    (%eax),%al$/;"	l
d57	usertests.asm	/^     d57:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)$/;"	l
d59	sh.asm	/^     d59:	84 c0                	test   %al,%al$/;"	l
d5b	sh.asm	/^     d5b:	75 e5                	jne    d42 <strchr+0xe>$/;"	l
d5b	usertests.asm	/^     d5b:	7e ac                	jle    d09 <exitwait+0xf>$/;"	l
d5d	sh.asm	/^     d5d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d5d	usertests.asm	/^     d5d:	83 ec 08             	sub    $0x8,%esp$/;"	l
d6	cat.asm	/^  d6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d6	echo.asm	/^  d6:	8a 00                	mov    (%eax),%al$/;"	l
d6	forktest.asm	/^  d6:	e8 25 ff ff ff       	call   0 <printf>$/;"	l
d6	grep.asm	/^  d6:	83 ec 04             	sub    $0x4,%esp$/;"	l
d6	init.asm	/^  d6:	68 97 08 00 00       	push   $0x897$/;"	l
d6	ls.asm	/^  d6:	83 ec 04             	sub    $0x4,%esp$/;"	l
d6	sh.asm	/^      d6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d6	wc.asm	/^  d6:	68 fe 08 00 00       	push   $0x8fe$/;"	l
d60	usertests.asm	/^     d60:	68 e2 48 00 00       	push   $0x48e2$/;"	l
d62	sh.asm	/^     d62:	c9                   	leave  $/;"	l
d63	sh.asm	/^     d63:	c3                   	ret    $/;"	l
d64	sh.asm	/^     d64:	55                   	push   %ebp$/;"	l
d65	sh.asm	/^     d65:	89 e5                	mov    %esp,%ebp$/;"	l
d65	usertests.asm	/^     d65:	6a 01                	push   $0x1$/;"	l
d67	sh.asm	/^     d67:	83 ec 18             	sub    $0x18,%esp$/;"	l
d67	usertests.asm	/^     d67:	e8 9f 32 00 00       	call   400b <printf>$/;"	l
d6a	sh.asm	/^     d6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d6c	usertests.asm	/^     d6c:	83 c4 10             	add    $0x10,%esp$/;"	l
d6f	usertests.asm	/^     d6f:	c9                   	leave  $/;"	l
d7	ln.asm	/^  d7:	8a 00                	mov    (%eax),%al$/;"	l
d7	mkdir.asm	/^  d7:	c9                   	leave  $/;"	l
d7	rm.asm	/^  d7:	c9                   	leave  $/;"	l
d7	zombie.asm	/^  d7:	75 f1                	jne    ca <strlen+0xf>$/;"	l
d70	usertests.asm	/^     d70:	c3                   	ret    $/;"	l
d71	sh.asm	/^     d71:	eb 38                	jmp    dab <gets+0x47>$/;"	l
d71	usertests.asm	/^     d71:	55                   	push   %ebp$/;"	l
d72	usertests.asm	/^     d72:	89 e5                	mov    %esp,%ebp$/;"	l
d73	sh.asm	/^     d73:	83 ec 04             	sub    $0x4,%esp$/;"	l
d74	usertests.asm	/^     d74:	83 ec 18             	sub    $0x18,%esp$/;"	l
d76	sh.asm	/^     d76:	6a 01                	push   $0x1$/;"	l
d77	usertests.asm	/^     d77:	83 ec 08             	sub    $0x8,%esp$/;"	l
d78	sh.asm	/^     d78:	8d 45 ef             	lea    -0x11(%ebp),%eax$/;"	l
d7a	usertests.asm	/^     d7a:	68 ef 48 00 00       	push   $0x48ef$/;"	l
d7b	sh.asm	/^     d7b:	50                   	push   %eax$/;"	l
d7c	sh.asm	/^     d7c:	6a 00                	push   $0x0$/;"	l
d7e	sh.asm	/^     d7e:	e8 31 01 00 00       	call   eb4 <read>$/;"	l
d7f	usertests.asm	/^     d7f:	6a 01                	push   $0x1$/;"	l
d8	echo.asm	/^  d8:	0f b6 d0             	movzbl %al,%edx$/;"	l
d8	kill.asm	/^  d8:	8a 10                	mov    (%eax),%dl$/;"	l
d8	mkdir.asm	/^  d8:	c3                   	ret    $/;"	l
d8	rm.asm	/^  d8:	c3                   	ret    $/;"	l
d8	usertests.asm	/^      d8:	a1 ac 5b 00 00       	mov    0x5bac,%eax$/;"	l
d81	usertests.asm	/^     d81:	e8 85 32 00 00       	call   400b <printf>$/;"	l
d83	sh.asm	/^     d83:	83 c4 10             	add    $0x10,%esp$/;"	l
d86	sh.asm	/^     d86:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d86	usertests.asm	/^     d86:	83 c4 10             	add    $0x10,%esp$/;"	l
d89	sh.asm	/^     d89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d89	usertests.asm	/^     d89:	e8 8e 31 00 00       	call   3f1c <getpid>$/;"	l
d8d	sh.asm	/^     d8d:	7e 27                	jle    db6 <gets+0x52>$/;"	l
d8e	usertests.asm	/^     d8e:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d8f	sh.asm	/^     d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d9	cat.asm	/^  d9:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
d9	grep.asm	/^  d9:	50                   	push   %eax$/;"	l
d9	ln.asm	/^  d9:	84 c0                	test   %al,%al$/;"	l
d9	ls.asm	/^  d9:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
d9	mkdir.asm	/^  d9:	55                   	push   %ebp$/;"	l
d9	rm.asm	/^  d9:	55                   	push   %ebp$/;"	l
d9	sh.asm	/^      d9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d9	stressfs.asm	/^  d9:	7e dd                	jle    b8 <main+0xb8>$/;"	l
d9	zombie.asm	/^  d9:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d91	usertests.asm	/^     d91:	e8 fe 30 00 00       	call   3e94 <fork>$/;"	l
d92	sh.asm	/^     d92:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
d95	sh.asm	/^     d95:	8a 55 ef             	mov    -0x11(%ebp),%dl$/;"	l
d96	usertests.asm	/^     d96:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
d98	sh.asm	/^     d98:	88 10                	mov    %dl,(%eax)$/;"	l
d99	usertests.asm	/^     d99:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
d9a	sh.asm	/^     d9a:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
d9d	sh.asm	/^     d9d:	8a 45 ef             	mov    -0x11(%ebp),%al$/;"	l
d9d	usertests.asm	/^     d9d:	0f 85 b7 00 00 00    	jne    e5a <mem+0xe9>$/;"	l
da	grep.asm	/^  da:	52                   	push   %edx$/;"	l
da	kill.asm	/^  da:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
da	mkdir.asm	/^  da:	89 e5                	mov    %esp,%ebp$/;"	l
da	rm.asm	/^  da:	89 e5                	mov    %esp,%ebp$/;"	l
da0	sh.asm	/^     da0:	3c 0a                	cmp    $0xa,%al$/;"	l
da2	sh.asm	/^     da2:	74 13                	je     db7 <gets+0x53>$/;"	l
da3	usertests.asm	/^     da3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
da4	sh.asm	/^     da4:	8a 45 ef             	mov    -0x11(%ebp),%al$/;"	l
da7	sh.asm	/^     da7:	3c 0d                	cmp    $0xd,%al$/;"	l
da9	sh.asm	/^     da9:	74 0c                	je     db7 <gets+0x53>$/;"	l
daa	usertests.asm	/^     daa:	eb 0e                	jmp    dba <mem+0x49>$/;"	l
dab	sh.asm	/^     dab:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dac	usertests.asm	/^     dac:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dae	sh.asm	/^     dae:	40                   	inc    %eax$/;"	l
daf	sh.asm	/^     daf:	3b 45 0c             	cmp    0xc(%ebp),%eax$/;"	l
daf	usertests.asm	/^     daf:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
data	buf.h	/^  uchar data[512];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^	uint day;$/;"	m	struct:rtcdate
db	echo.asm	/^  db:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
db	forktest.asm	/^  db:	83 c4 10             	add    $0x10,%esp$/;"	l
db	grep.asm	/^  db:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
db	init.asm	/^  db:	6a 01                	push   $0x1$/;"	l
db	ln.asm	/^  db:	74 0e                	je     eb <strcmp+0x22>$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	stressfs.asm	/^  db:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db	wc.asm	/^  db:	6a 01                	push   $0x1$/;"	l
db2	sh.asm	/^     db2:	7c bf                	jl     d73 <gets+0xf>$/;"	l
db2	usertests.asm	/^     db2:	89 10                	mov    %edx,(%eax)$/;"	l
db4	sh.asm	/^     db4:	eb 01                	jmp    db7 <gets+0x53>$/;"	l
db4	usertests.asm	/^     db4:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
db6	sh.asm	/^     db6:	90                   	nop$/;"	l
db7	sh.asm	/^     db7:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
db7	usertests.asm	/^     db7:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dba	sh.asm	/^     dba:	03 45 08             	add    0x8(%ebp),%eax$/;"	l
dba	usertests.asm	/^     dba:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dbd	sh.asm	/^     dbd:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
dbd	usertests.asm	/^     dbd:	68 11 27 00 00       	push   $0x2711$/;"	l
dc	cat.asm	/^  dc:	e8 1f ff ff ff       	call   0 <cat>$/;"	l
dc	ls.asm	/^  dc:	68 84 0a 00 00       	push   $0xa84$/;"	l
dc	mkdir.asm	/^  dc:	eb 06                	jmp    e4 <strcmp+0xb>$/;"	l
dc	rm.asm	/^  dc:	eb 06                	jmp    e4 <strcmp+0xb>$/;"	l
dc	sh.asm	/^      dc:	50                   	push   %eax$/;"	l
dc	zombie.asm	/^  dc:	c9                   	leave  $/;"	l
dc0	sh.asm	/^     dc0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dc2	usertests.asm	/^     dc2:	e8 0c 35 00 00       	call   42d3 <malloc>$/;"	l
dc3	sh.asm	/^     dc3:	c9                   	leave  $/;"	l
dc4	sh.asm	/^     dc4:	c3                   	ret    $/;"	l
dc5	sh.asm	/^     dc5:	55                   	push   %ebp$/;"	l
dc6	sh.asm	/^     dc6:	89 e5                	mov    %esp,%ebp$/;"	l
dc7	usertests.asm	/^     dc7:	83 c4 10             	add    $0x10,%esp$/;"	l
dc8	sh.asm	/^     dc8:	83 ec 18             	sub    $0x18,%esp$/;"	l
dca	usertests.asm	/^     dca:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
dcb	sh.asm	/^     dcb:	83 ec 08             	sub    $0x8,%esp$/;"	l
dcd	usertests.asm	/^     dcd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
dce	sh.asm	/^     dce:	6a 00                	push   $0x0$/;"	l
dd	init.asm	/^  dd:	e8 c5 03 00 00       	call   4a7 <printf>$/;"	l
dd	kill.asm	/^  dd:	8a 00                	mov    (%eax),%al$/;"	l
dd	ln.asm	/^  dd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dd	sh.asm	/^      dd:	e8 1e ff ff ff       	call   0 <runcmd>$/;"	l
dd	usertests.asm	/^      dd:	83 ec 08             	sub    $0x8,%esp$/;"	l
dd	wc.asm	/^  dd:	e8 5d 04 00 00       	call   53f <printf>$/;"	l
dd	zombie.asm	/^  dd:	c3                   	ret    $/;"	l
dd0	sh.asm	/^     dd0:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
dd1	usertests.asm	/^     dd1:	75 d9                	jne    dac <mem+0x3b>$/;"	l
dd3	sh.asm	/^     dd3:	e8 04 01 00 00       	call   edc <open>$/;"	l
dd3	usertests.asm	/^     dd3:	eb 1c                	jmp    df1 <mem+0x80>$/;"	l
dd5	usertests.asm	/^     dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dd8	sh.asm	/^     dd8:	83 c4 10             	add    $0x10,%esp$/;"	l
dd8	usertests.asm	/^     dd8:	8b 00                	mov    (%eax),%eax$/;"	l
dda	usertests.asm	/^     dda:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
ddb	sh.asm	/^     ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ddd	usertests.asm	/^     ddd:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dde	sh.asm	/^     dde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
de	echo.asm	/^  de:	8a 00                	mov    (%eax),%al$/;"	l
de	forktest.asm	/^  de:	e8 65 02 00 00       	call   348 <exit>$/;"	l
de	grep.asm	/^  de:	e8 79 04 00 00       	call   55c <read>$/;"	l
de	mkdir.asm	/^  de:	ff 45 08             	incl   0x8(%ebp)$/;"	l
de	rm.asm	/^  de:	ff 45 08             	incl   0x8(%ebp)$/;"	l
de	stressfs.asm	/^  de:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
de	zombie.asm	/^  de:	55                   	push   %ebp$/;"	l
de0	usertests.asm	/^     de0:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
de2	sh.asm	/^     de2:	79 07                	jns    deb <stat+0x26>$/;"	l
de3	usertests.asm	/^     de3:	e8 b4 33 00 00       	call   419c <free>$/;"	l
de4	sh.asm	/^     de4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
de8	usertests.asm	/^     de8:	83 c4 10             	add    $0x10,%esp$/;"	l
de9	sh.asm	/^     de9:	eb 25                	jmp    e10 <stat+0x4b>$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deb	sh.asm	/^     deb:	83 ec 08             	sub    $0x8,%esp$/;"	l
deb	usertests.asm	/^     deb:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dee	sh.asm	/^     dee:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
dee	usertests.asm	/^     dee:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	kill.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df	zombie.asm	/^  df:	89 e5                	mov    %esp,%ebp$/;"	l
df1	sh.asm	/^     df1:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
df1	usertests.asm	/^     df1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
df4	sh.asm	/^     df4:	e8 fb 00 00 00       	call   ef4 <fstat>$/;"	l
df5	usertests.asm	/^     df5:	75 de                	jne    dd5 <mem+0x64>$/;"	l
df7	usertests.asm	/^     df7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
df9	sh.asm	/^     df9:	83 c4 10             	add    $0x10,%esp$/;"	l
dfa	usertests.asm	/^     dfa:	68 00 50 00 00       	push   $0x5000$/;"	l
dfc	sh.asm	/^     dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
dff	sh.asm	/^     dff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dff	usertests.asm	/^     dff:	e8 cf 34 00 00       	call   42d3 <malloc>$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	68 c0 08 00 00       	push   $0x8c0$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon7	file:
e	echo.asm	/^   e:	51                   	push   %ecx$/;"	l
e	init.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	51                   	push   %ecx$/;"	l
e	ln.asm	/^   e:	51                   	push   %ecx$/;"	l
e	mkdir.asm	/^   e:	51                   	push   %ecx$/;"	l
e	rm.asm	/^   e:	51                   	push   %ecx$/;"	l
e	stressfs.asm	/^   e:	56                   	push   %esi$/;"	l
e	usertests.asm	/^       e:	68 ca 43 00 00       	push   $0x43ca$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	echo.asm	/^  e0:	0f b6 c0             	movzbl %al,%eax$/;"	l
e0	ln.asm	/^  e0:	8a 10                	mov    (%eax),%dl$/;"	l
e0	usertests.asm	/^      e0:	68 38 44 00 00       	push   $0x4438$/;"	l
e02	sh.asm	/^     e02:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
e04	usertests.asm	/^     e04:	83 c4 10             	add    $0x10,%esp$/;"	l
e05	sh.asm	/^     e05:	e8 ba 00 00 00       	call   ec4 <close>$/;"	l
e07	usertests.asm	/^     e07:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e0a	sh.asm	/^     e0a:	83 c4 10             	add    $0x10,%esp$/;"	l
e0a	usertests.asm	/^     e0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e0d	sh.asm	/^     e0d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e0e	usertests.asm	/^     e0e:	75 25                	jne    e35 <mem+0xc4>$/;"	l
e1	cat.asm	/^  e1:	83 c4 10             	add    $0x10,%esp$/;"	l
e1	kill.asm	/^  e1:	74 e3                	je     c6 <strcmp+0x5>$/;"	l
e1	ls.asm	/^  e1:	6a 02                	push   $0x2$/;"	l
e1	mkdir.asm	/^  e1:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
e1	rm.asm	/^  e1:	ff 45 0c             	incl   0xc(%ebp)$/;"	l
e1	stressfs.asm	/^  e1:	e8 ca 02 00 00       	call   3b0 <close>$/;"	l
e1	zombie.asm	/^  e1:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
e10	sh.asm	/^     e10:	c9                   	leave  $/;"	l
e10	usertests.asm	/^     e10:	83 ec 08             	sub    $0x8,%esp$/;"	l
e11	sh.asm	/^     e11:	c3                   	ret    $/;"	l
e12	sh.asm	/^     e12:	55                   	push   %ebp$/;"	l
e13	sh.asm	/^     e13:	89 e5                	mov    %esp,%ebp$/;"	l
e13	usertests.asm	/^     e13:	68 f9 48 00 00       	push   $0x48f9$/;"	l
e15	sh.asm	/^     e15:	83 ec 10             	sub    $0x10,%esp$/;"	l
e18	sh.asm	/^     e18:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
e18	usertests.asm	/^     e18:	6a 01                	push   $0x1$/;"	l
e1a	usertests.asm	/^     e1a:	e8 ec 31 00 00       	call   400b <printf>$/;"	l
e1f	sh.asm	/^     e1f:	eb 22                	jmp    e43 <atoi+0x31>$/;"	l
e1f	usertests.asm	/^     e1f:	83 c4 10             	add    $0x10,%esp$/;"	l
e2	init.asm	/^  e2:	83 c4 10             	add    $0x10,%esp$/;"	l
e2	ln.asm	/^  e2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e2	sh.asm	/^      e2:	83 c4 10             	add    $0x10,%esp$/;"	l
e2	wc.asm	/^  e2:	83 c4 20             	add    $0x20,%esp$/;"	l
e21	sh.asm	/^     e21:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
e22	usertests.asm	/^     e22:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e24	sh.asm	/^     e24:	89 d0                	mov    %edx,%eax$/;"	l
e25	usertests.asm	/^     e25:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
e26	sh.asm	/^     e26:	c1 e0 02             	shl    $0x2,%eax$/;"	l
e28	usertests.asm	/^     e28:	e8 9f 30 00 00       	call   3ecc <kill>$/;"	l
e29	sh.asm	/^     e29:	01 d0                	add    %edx,%eax$/;"	l
e2b	sh.asm	/^     e2b:	d1 e0                	shl    %eax$/;"	d
e2d	sh.asm	/^     e2d:	89 c2                	mov    %eax,%edx$/;"	l
e2d	usertests.asm	/^     e2d:	83 c4 10             	add    $0x10,%esp$/;"	l
e2f	sh.asm	/^     e2f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	echo.asm	/^  e3:	89 d1                	mov    %edx,%ecx$/;"	l
e3	forktest.asm	/^  e3:	83 ec 08             	sub    $0x8,%esp$/;"	l
e3	grep.asm	/^  e3:	83 c4 10             	add    $0x10,%esp$/;"	l
e3	kill.asm	/^  e3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	ls.asm	/^  e3:	e8 f3 05 00 00       	call   6db <printf>$/;"	l
e30	usertests.asm	/^     e30:	e8 67 30 00 00       	call   3e9c <exit>$/;"	l
e32	sh.asm	/^     e32:	8a 00                	mov    (%eax),%al$/;"	l
e34	sh.asm	/^     e34:	0f be c0             	movsbl %al,%eax$/;"	l
e35	usertests.asm	/^     e35:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e37	sh.asm	/^     e37:	8d 04 02             	lea    (%edx,%eax,1),%eax$/;"	l
e38	usertests.asm	/^     e38:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
e3a	sh.asm	/^     e3a:	83 e8 30             	sub    $0x30,%eax$/;"	l
e3b	usertests.asm	/^     e3b:	e8 5c 33 00 00       	call   419c <free>$/;"	l
e3d	sh.asm	/^     e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e4	cat.asm	/^  e4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e4	mkdir.asm	/^  e4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4	rm.asm	/^  e4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4	zombie.asm	/^  e4:	50                   	push   %eax$/;"	l
e40	sh.asm	/^     e40:	ff 45 08             	incl   0x8(%ebp)$/;"	l
e40	usertests.asm	/^     e40:	83 c4 10             	add    $0x10,%esp$/;"	l
e43	sh.asm	/^     e43:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e43	usertests.asm	/^     e43:	83 ec 08             	sub    $0x8,%esp$/;"	l
e46	sh.asm	/^     e46:	8a 00                	mov    (%eax),%al$/;"	l
e46	usertests.asm	/^     e46:	68 13 49 00 00       	push   $0x4913$/;"	l
e48	sh.asm	/^     e48:	3c 2f                	cmp    $0x2f,%al$/;"	l
e4a	sh.asm	/^     e4a:	7e 09                	jle    e55 <atoi+0x43>$/;"	l
e4b	usertests.asm	/^     e4b:	6a 01                	push   $0x1$/;"	l
e4c	sh.asm	/^     e4c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e4d	usertests.asm	/^     e4d:	e8 b9 31 00 00       	call   400b <printf>$/;"	l
e4f	sh.asm	/^     e4f:	8a 00                	mov    (%eax),%al$/;"	l
e5	echo.asm	/^  e5:	29 c1                	sub    %eax,%ecx$/;"	l
e5	init.asm	/^  e5:	e8 56 02 00 00       	call   340 <wait>$/;"	l
e5	ln.asm	/^  e5:	8a 00                	mov    (%eax),%al$/;"	l
e5	sh.asm	/^      e5:	e9 5e 01 00 00       	jmp    248 <runcmd+0x248>$/;"	l
e5	usertests.asm	/^      e5:	50                   	push   %eax$/;"	l
e5	wc.asm	/^  e5:	c9                   	leave  $/;"	l
e5	zombie.asm	/^  e5:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
e51	sh.asm	/^     e51:	3c 39                	cmp    $0x39,%al$/;"	l
e52	usertests.asm	/^     e52:	83 c4 10             	add    $0x10,%esp$/;"	l
e53	sh.asm	/^     e53:	7e cc                	jle    e21 <atoi+0xf>$/;"	l
e55	sh.asm	/^     e55:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e55	usertests.asm	/^     e55:	e8 42 30 00 00       	call   3e9c <exit>$/;"	l
e58	sh.asm	/^     e58:	c9                   	leave  $/;"	l
e59	sh.asm	/^     e59:	c3                   	ret    $/;"	l
e5a	sh.asm	/^     e5a:	55                   	push   %ebp$/;"	l
e5a	usertests.asm	/^     e5a:	e8 45 30 00 00       	call   3ea4 <wait>$/;"	l
e5b	sh.asm	/^     e5b:	89 e5                	mov    %esp,%ebp$/;"	l
e5d	sh.asm	/^     e5d:	83 ec 10             	sub    $0x10,%esp$/;"	l
e5f	usertests.asm	/^     e5f:	c9                   	leave  $/;"	l
e6	forktest.asm	/^  e6:	68 3a 04 00 00       	push   $0x43a$/;"	l
e6	grep.asm	/^  e6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
e6	kill.asm	/^  e6:	8a 00                	mov    (%eax),%al$/;"	l
e6	stressfs.asm	/^  e6:	83 c4 10             	add    $0x10,%esp$/;"	l
e6	usertests.asm	/^      e6:	e8 20 3f 00 00       	call   400b <printf>$/;"	l
e6	wc.asm	/^  e6:	c3                   	ret    $/;"	l
e60	sh.asm	/^     e60:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e60	usertests.asm	/^     e60:	c3                   	ret    $/;"	l
e61	usertests.asm	/^     e61:	55                   	push   %ebp$/;"	l
e62	usertests.asm	/^     e62:	89 e5                	mov    %esp,%ebp$/;"	l
e63	sh.asm	/^     e63:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e64	usertests.asm	/^     e64:	83 ec 38             	sub    $0x38,%esp$/;"	l
e66	sh.asm	/^     e66:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e67	usertests.asm	/^     e67:	83 ec 08             	sub    $0x8,%esp$/;"	l
e69	sh.asm	/^     e69:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
e6a	usertests.asm	/^     e6a:	68 1b 49 00 00       	push   $0x491b$/;"	l
e6c	sh.asm	/^     e6c:	eb 10                	jmp    e7e <memmove+0x24>$/;"	l
e6e	sh.asm	/^     e6e:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
e6f	usertests.asm	/^     e6f:	6a 01                	push   $0x1$/;"	l
e7	cat.asm	/^  e7:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
e7	echo.asm	/^  e7:	89 c8                	mov    %ecx,%eax$/;"	l
e7	ln.asm	/^  e7:	38 c2                	cmp    %al,%dl$/;"	l
e7	mkdir.asm	/^  e7:	8a 00                	mov    (%eax),%al$/;"	l
e7	rm.asm	/^  e7:	8a 00                	mov    (%eax),%al$/;"	l
e7	wc.asm	/^  e7:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
e71	sh.asm	/^     e71:	8a 10                	mov    (%eax),%dl$/;"	l
e71	usertests.asm	/^     e71:	e8 95 31 00 00       	call   400b <printf>$/;"	l
e73	sh.asm	/^     e73:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e76	sh.asm	/^     e76:	88 10                	mov    %dl,(%eax)$/;"	l
e76	usertests.asm	/^     e76:	83 c4 10             	add    $0x10,%esp$/;"	l
e78	sh.asm	/^     e78:	ff 45 fc             	incl   -0x4(%ebp)$/;"	l
e79	usertests.asm	/^     e79:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e7b	sh.asm	/^     e7b:	ff 45 f8             	incl   -0x8(%ebp)$/;"	l
e7c	usertests.asm	/^     e7c:	68 2a 49 00 00       	push   $0x492a$/;"	l
e7e	sh.asm	/^     e7e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)$/;"	l
e8	kill.asm	/^  e8:	0f b6 d0             	movzbl %al,%edx$/;"	l
e8	ls.asm	/^  e8:	83 c4 10             	add    $0x10,%esp$/;"	l
e8	zombie.asm	/^  e8:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
e81	usertests.asm	/^     e81:	e8 66 30 00 00       	call   3eec <unlink>$/;"	l
e82	sh.asm	/^     e82:	0f 9f c0             	setg   %al$/;"	l
e85	sh.asm	/^     e85:	ff 4d 10             	decl   0x10(%ebp)$/;"	l
e86	usertests.asm	/^     e86:	83 c4 10             	add    $0x10,%esp$/;"	l
e88	sh.asm	/^     e88:	84 c0                	test   %al,%al$/;"	l
e89	usertests.asm	/^     e89:	83 ec 08             	sub    $0x8,%esp$/;"	l
e8a	sh.asm	/^     e8a:	75 e2                	jne    e6e <memmove+0x14>$/;"	l
e8c	sh.asm	/^     e8c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e8c	usertests.asm	/^     e8c:	68 02 02 00 00       	push   $0x202$/;"	l
e8f	sh.asm	/^     e8f:	c9                   	leave  $/;"	l
e9	echo.asm	/^  e9:	c9                   	leave  $/;"	l
e9	grep.asm	/^  e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
e9	ln.asm	/^  e9:	74 e3                	je     ce <strcmp+0x5>$/;"	l
e9	mkdir.asm	/^  e9:	84 c0                	test   %al,%al$/;"	l
e9	rm.asm	/^  e9:	84 c0                	test   %al,%al$/;"	l
e9	stressfs.asm	/^  e9:	83 ec 08             	sub    $0x8,%esp$/;"	l
e90	sh.asm	/^     e90:	c3                   	ret    $/;"	l
e91	sh.asm	/^     e91:	90                   	nop$/;"	l
e91	usertests.asm	/^     e91:	68 2a 49 00 00       	push   $0x492a$/;"	l
e92	sh.asm	/^     e92:	90                   	nop$/;"	l
e93	sh.asm	/^     e93:	90                   	nop$/;"	l
e94	sh.asm	/^     e94:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
e96	usertests.asm	/^     e96:	e8 41 30 00 00       	call   3edc <open>$/;"	l
e99	sh.asm	/^     e99:	cd 40                	int    $0x40$/;"	l
e9b	sh.asm	/^     e9b:	c3                   	ret    $/;"	l
e9b	usertests.asm	/^     e9b:	83 c4 10             	add    $0x10,%esp$/;"	l
e9c	sh.asm	/^     e9c:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
e9e	usertests.asm	/^     e9e:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
ea	cat.asm	/^  ea:	e8 71 02 00 00       	call   360 <close>$/;"	l
ea	echo.asm	/^  ea:	c3                   	ret    $/;"	l
ea	init.asm	/^  ea:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ea	sh.asm	/^      ea:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea1	sh.asm	/^     ea1:	cd 40                	int    $0x40$/;"	l
ea1	usertests.asm	/^     ea1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
ea3	sh.asm	/^     ea3:	c3                   	ret    $/;"	l
ea4	sh.asm	/^     ea4:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
ea5	usertests.asm	/^     ea5:	79 17                	jns    ebe <sharedfd+0x5d>$/;"	l
ea7	usertests.asm	/^     ea7:	83 ec 08             	sub    $0x8,%esp$/;"	l
ea9	sh.asm	/^     ea9:	cd 40                	int    $0x40$/;"	l
eaa	usertests.asm	/^     eaa:	68 34 49 00 00       	push   $0x4934$/;"	l
eab	sh.asm	/^     eab:	c3                   	ret    $/;"	l
eac	sh.asm	/^     eac:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
eaf	usertests.asm	/^     eaf:	6a 01                	push   $0x1$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	echo.asm	/^  eb:	55                   	push   %ebp$/;"	l
eb	forktest.asm	/^  eb:	6a 01                	push   $0x1$/;"	l
eb	kill.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb	ln.asm	/^  eb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eb	ls.asm	/^  eb:	e9 dd 01 00 00       	jmp    2cd <ls+0x21c>$/;"	l
eb	mkdir.asm	/^  eb:	74 0e                	je     fb <strcmp+0x22>$/;"	l
eb	rm.asm	/^  eb:	74 0e                	je     fb <strcmp+0x22>$/;"	l
eb	usertests.asm	/^      eb:	83 c4 10             	add    $0x10,%esp$/;"	l
eb	wc.asm	/^  eb:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
eb	zombie.asm	/^  eb:	e8 3c ff ff ff       	call   2c <stosb>$/;"	l
eb1	sh.asm	/^     eb1:	cd 40                	int    $0x40$/;"	l
eb1	usertests.asm	/^     eb1:	e8 55 31 00 00       	call   400b <printf>$/;"	l
eb3	sh.asm	/^     eb3:	c3                   	ret    $/;"	l
eb4	sh.asm	/^     eb4:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
eb6	usertests.asm	/^     eb6:	83 c4 10             	add    $0x10,%esp$/;"	l
eb9	sh.asm	/^     eb9:	cd 40                	int    $0x40$/;"	l
eb9	usertests.asm	/^     eb9:	e9 7a 01 00 00       	jmp    1038 <sharedfd+0x1d7>$/;"	l
ebb	sh.asm	/^     ebb:	c3                   	ret    $/;"	l
ebc	sh.asm	/^     ebc:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
ebe	usertests.asm	/^     ebe:	e8 d1 2f 00 00       	call   3e94 <fork>$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	echo.asm	/^  ec:	89 e5                	mov    %esp,%ebp$/;"	l
ec	stressfs.asm	/^  ec:	68 bd 08 00 00       	push   $0x8bd$/;"	l
ec1	sh.asm	/^     ec1:	cd 40                	int    $0x40$/;"	l
ec3	sh.asm	/^     ec3:	c3                   	ret    $/;"	l
ec3	usertests.asm	/^     ec3:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
ec4	sh.asm	/^     ec4:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
ec6	usertests.asm	/^     ec6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
ec9	sh.asm	/^     ec9:	cd 40                	int    $0x40$/;"	l
eca	usertests.asm	/^     eca:	75 07                	jne    ed3 <sharedfd+0x72>$/;"	l
ecb	sh.asm	/^     ecb:	c3                   	ret    $/;"	l
ecc	sh.asm	/^     ecc:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
ecc	usertests.asm	/^     ecc:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	forktest.asm	/^  ed:	e8 0e ff ff ff       	call   0 <printf>$/;"	l
ed	grep.asm	/^  ed:	0f 8f 1f ff ff ff    	jg     12 <grep+0x12>$/;"	l
ed	init.asm	/^  ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ed	mkdir.asm	/^  ed:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ed	rm.asm	/^  ed:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ed	sh.asm	/^      ed:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ed1	sh.asm	/^     ed1:	cd 40                	int    $0x40$/;"	l
ed1	usertests.asm	/^     ed1:	eb 05                	jmp    ed8 <sharedfd+0x77>$/;"	l
ed3	sh.asm	/^     ed3:	c3                   	ret    $/;"	l
ed3	usertests.asm	/^     ed3:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
ed4	sh.asm	/^     ed4:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
ed8	usertests.asm	/^     ed8:	83 ec 04             	sub    $0x4,%esp$/;"	l
ed9	sh.asm	/^     ed9:	cd 40                	int    $0x40$/;"	l
edb	sh.asm	/^     edb:	c3                   	ret    $/;"	l
edb	usertests.asm	/^     edb:	6a 0a                	push   $0xa$/;"	l
edc	sh.asm	/^     edc:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
edd	usertests.asm	/^     edd:	50                   	push   %eax$/;"	l
ede	usertests.asm	/^     ede:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	echo.asm	/^  ee:	83 ec 10             	sub    $0x10,%esp$/;"	l
ee	kill.asm	/^  ee:	8a 00                	mov    (%eax),%al$/;"	l
ee	ln.asm	/^  ee:	8a 00                	mov    (%eax),%al$/;"	l
ee	usertests.asm	/^      ee:	c9                   	leave  $/;"	l
ee	wc.asm	/^  ee:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
ee1	sh.asm	/^     ee1:	cd 40                	int    $0x40$/;"	l
ee1	usertests.asm	/^     ee1:	50                   	push   %eax$/;"	l
ee2	usertests.asm	/^     ee2:	e8 33 2e 00 00       	call   3d1a <memset>$/;"	l
ee3	sh.asm	/^     ee3:	c3                   	ret    $/;"	l
ee4	sh.asm	/^     ee4:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
ee7	usertests.asm	/^     ee7:	83 c4 10             	add    $0x10,%esp$/;"	l
ee9	sh.asm	/^     ee9:	cd 40                	int    $0x40$/;"	l
eea	usertests.asm	/^     eea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
eeb	sh.asm	/^     eeb:	c3                   	ret    $/;"	l
eec	sh.asm	/^     eec:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
ef	cat.asm	/^  ef:	83 c4 10             	add    $0x10,%esp$/;"	l
ef	usertests.asm	/^      ef:	c3                   	ret    $/;"	l
ef1	sh.asm	/^     ef1:	cd 40                	int    $0x40$/;"	l
ef1	usertests.asm	/^     ef1:	eb 30                	jmp    f23 <sharedfd+0xc2>$/;"	l
ef3	sh.asm	/^     ef3:	c3                   	ret    $/;"	l
ef3	usertests.asm	/^     ef3:	83 ec 04             	sub    $0x4,%esp$/;"	l
ef4	sh.asm	/^     ef4:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
ef6	usertests.asm	/^     ef6:	6a 0a                	push   $0xa$/;"	l
ef8	usertests.asm	/^     ef8:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
ef9	sh.asm	/^     ef9:	cd 40                	int    $0x40$/;"	l
efb	sh.asm	/^     efb:	c3                   	ret    $/;"	l
efb	usertests.asm	/^     efb:	50                   	push   %eax$/;"	l
efc	sh.asm	/^     efc:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
efc	usertests.asm	/^     efc:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
eff	usertests.asm	/^     eff:	e8 b8 2f 00 00       	call   3ebc <write>$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	echo.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	kill.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	ln.asm	/^   f:	89 cb                	mov    %ecx,%ebx$/;"	l
f	mkdir.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	rm.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	stressfs.asm	/^   f:	53                   	push   %ebx$/;"	l
f0	kill.asm	/^  f0:	0f b6 c0             	movzbl %al,%eax$/;"	l
f0	ln.asm	/^  f0:	0f b6 d0             	movzbl %al,%edx$/;"	l
f0	ls.asm	/^  f0:	83 ec 08             	sub    $0x8,%esp$/;"	l
f0	mkdir.asm	/^  f0:	8a 10                	mov    (%eax),%dl$/;"	l
f0	rm.asm	/^  f0:	8a 10                	mov    (%eax),%dl$/;"	l
f0	sh.asm	/^      f0:	e8 c5 02 00 00       	call   3ba <fork1>$/;"	l
f0	usertests.asm	/^      f0:	55                   	push   %ebp$/;"	l
f0	zombie.asm	/^  f0:	83 c4 0c             	add    $0xc,%esp$/;"	l
f01	sh.asm	/^     f01:	cd 40                	int    $0x40$/;"	l
f03	sh.asm	/^     f03:	c3                   	ret    $/;"	l
f04	sh.asm	/^     f04:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
f04	usertests.asm	/^     f04:	83 c4 10             	add    $0x10,%esp$/;"	l
f07	usertests.asm	/^     f07:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
f09	sh.asm	/^     f09:	cd 40                	int    $0x40$/;"	l
f0a	usertests.asm	/^     f0a:	74 14                	je     f20 <sharedfd+0xbf>$/;"	l
f0b	sh.asm	/^     f0b:	c3                   	ret    $/;"	l
f0c	sh.asm	/^     f0c:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
f0c	usertests.asm	/^     f0c:	83 ec 08             	sub    $0x8,%esp$/;"	l
f0f	usertests.asm	/^     f0f:	68 60 49 00 00       	push   $0x4960$/;"	l
f1	echo.asm	/^  f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
f1	init.asm	/^  f1:	0f 88 72 ff ff ff    	js     69 <main+0x69>$/;"	l
f1	stressfs.asm	/^  f1:	6a 01                	push   $0x1$/;"	l
f1	usertests.asm	/^      f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	wc.asm	/^  f1:	55                   	push   %ebp$/;"	l
f11	sh.asm	/^     f11:	cd 40                	int    $0x40$/;"	l
f13	sh.asm	/^     f13:	c3                   	ret    $/;"	l
f14	sh.asm	/^     f14:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f14	usertests.asm	/^     f14:	6a 01                	push   $0x1$/;"	l
f16	usertests.asm	/^     f16:	e8 f0 30 00 00       	call   400b <printf>$/;"	l
f19	sh.asm	/^     f19:	cd 40                	int    $0x40$/;"	l
f1b	sh.asm	/^     f1b:	c3                   	ret    $/;"	l
f1b	usertests.asm	/^     f1b:	83 c4 10             	add    $0x10,%esp$/;"	l
f1c	sh.asm	/^     f1c:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f1e	usertests.asm	/^     f1e:	eb 0c                	jmp    f2c <sharedfd+0xcb>$/;"	l
f2	cat.asm	/^  f2:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
f2	forktest.asm	/^  f2:	83 c4 10             	add    $0x10,%esp$/;"	l
f2	mkdir.asm	/^  f2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f2	rm.asm	/^  f2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f2	wc.asm	/^  f2:	89 e5                	mov    %esp,%ebp$/;"	l
f20	usertests.asm	/^     f20:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
f21	sh.asm	/^     f21:	cd 40                	int    $0x40$/;"	l
f23	sh.asm	/^     f23:	c3                   	ret    $/;"	l
f23	usertests.asm	/^     f23:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)$/;"	l
f24	sh.asm	/^     f24:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
f29	sh.asm	/^     f29:	cd 40                	int    $0x40$/;"	l
f2a	usertests.asm	/^     f2a:	7e c7                	jle    ef3 <sharedfd+0x92>$/;"	l
f2b	sh.asm	/^     f2b:	c3                   	ret    $/;"	l
f2c	sh.asm	/^     f2c:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
f2c	usertests.asm	/^     f2c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
f3	grep.asm	/^  f3:	c9                   	leave  $/;"	l
f3	kill.asm	/^  f3:	89 d1                	mov    %edx,%ecx$/;"	l
f3	ln.asm	/^  f3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f3	ls.asm	/^  f3:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax$/;"	l
f3	stressfs.asm	/^  f3:	e8 ff 03 00 00       	call   4f7 <printf>$/;"	l
f3	usertests.asm	/^      f3:	83 ec 18             	sub    $0x18,%esp$/;"	l
f3	zombie.asm	/^  f3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f30	usertests.asm	/^     f30:	75 05                	jne    f37 <sharedfd+0xd6>$/;"	l
f31	sh.asm	/^     f31:	cd 40                	int    $0x40$/;"	l
f32	usertests.asm	/^     f32:	e8 65 2f 00 00       	call   3e9c <exit>$/;"	l
f33	sh.asm	/^     f33:	c3                   	ret    $/;"	l
f34	sh.asm	/^     f34:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
f37	usertests.asm	/^     f37:	e8 68 2f 00 00       	call   3ea4 <wait>$/;"	l
f39	sh.asm	/^     f39:	cd 40                	int    $0x40$/;"	l
f3b	sh.asm	/^     f3b:	c3                   	ret    $/;"	l
f3c	sh.asm	/^     f3c:	55                   	push   %ebp$/;"	l
f3c	usertests.asm	/^     f3c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f3d	sh.asm	/^     f3d:	89 e5                	mov    %esp,%ebp$/;"	l
f3f	sh.asm	/^     f3f:	83 ec 18             	sub    $0x18,%esp$/;"	l
f3f	usertests.asm	/^     f3f:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
f4	grep.asm	/^  f4:	c3                   	ret    $/;"	l
f4	wc.asm	/^  f4:	53                   	push   %ebx$/;"	l
f42	sh.asm	/^     f42:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f42	usertests.asm	/^     f42:	e8 7d 2f 00 00       	call   3ec4 <close>$/;"	l
f45	sh.asm	/^     f45:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
f47	usertests.asm	/^     f47:	83 c4 10             	add    $0x10,%esp$/;"	l
f48	sh.asm	/^     f48:	83 ec 04             	sub    $0x4,%esp$/;"	l
f4a	usertests.asm	/^     f4a:	83 ec 08             	sub    $0x8,%esp$/;"	l
f4b	sh.asm	/^     f4b:	6a 01                	push   $0x1$/;"	l
f4d	sh.asm	/^     f4d:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
f4d	usertests.asm	/^     f4d:	6a 00                	push   $0x0$/;"	l
f4f	usertests.asm	/^     f4f:	68 2a 49 00 00       	push   $0x492a$/;"	l
f5	cat.asm	/^  f5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f5	forktest.asm	/^  f5:	c9                   	leave  $/;"	l
f5	grep.asm	/^  f5:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f5	kill.asm	/^  f5:	29 c1                	sub    %eax,%ecx$/;"	l
f5	mkdir.asm	/^  f5:	8a 00                	mov    (%eax),%al$/;"	l
f5	rm.asm	/^  f5:	8a 00                	mov    (%eax),%al$/;"	l
f5	sh.asm	/^      f5:	85 c0                	test   %eax,%eax$/;"	l
f5	wc.asm	/^  f5:	51                   	push   %ecx$/;"	l
f50	sh.asm	/^     f50:	50                   	push   %eax$/;"	l
f51	sh.asm	/^     f51:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
f54	sh.asm	/^     f54:	e8 63 ff ff ff       	call   ebc <write>$/;"	l
f54	usertests.asm	/^     f54:	e8 83 2f 00 00       	call   3edc <open>$/;"	l
f59	sh.asm	/^     f59:	83 c4 10             	add    $0x10,%esp$/;"	l
f59	usertests.asm	/^     f59:	83 c4 10             	add    $0x10,%esp$/;"	l
f5c	sh.asm	/^     f5c:	c9                   	leave  $/;"	l
f5c	usertests.asm	/^     f5c:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
f5d	sh.asm	/^     f5d:	c3                   	ret    $/;"	l
f5e	sh.asm	/^     f5e:	55                   	push   %ebp$/;"	l
f5f	sh.asm	/^     f5f:	89 e5                	mov    %esp,%ebp$/;"	l
f5f	usertests.asm	/^     f5f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
f6	forktest.asm	/^  f6:	c3                   	ret    $/;"	l
f6	ln.asm	/^  f6:	8a 00                	mov    (%eax),%al$/;"	l
f6	usertests.asm	/^      f6:	a1 ac 5b 00 00       	mov    0x5bac,%eax$/;"	l
f6	wc.asm	/^  f6:	83 ec 10             	sub    $0x10,%esp$/;"	l
f6	zombie.asm	/^  f6:	c9                   	leave  $/;"	l
f61	sh.asm	/^     f61:	83 ec 38             	sub    $0x38,%esp$/;"	l
f63	usertests.asm	/^     f63:	79 17                	jns    f7c <sharedfd+0x11b>$/;"	l
f64	sh.asm	/^     f64:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
f65	usertests.asm	/^     f65:	83 ec 08             	sub    $0x8,%esp$/;"	l
f68	usertests.asm	/^     f68:	68 80 49 00 00       	push   $0x4980$/;"	l
f6b	sh.asm	/^     f6b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
f6d	usertests.asm	/^     f6d:	6a 01                	push   $0x1$/;"	l
f6f	sh.asm	/^     f6f:	74 17                	je     f88 <printint+0x2a>$/;"	l
f6f	usertests.asm	/^     f6f:	e8 97 30 00 00       	call   400b <printf>$/;"	l
f7	forktest.asm	/^  f7:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f7	init.asm	/^  f7:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f7	kill.asm	/^  f7:	89 c8                	mov    %ecx,%eax$/;"	l
f7	mkdir.asm	/^  f7:	38 c2                	cmp    %al,%dl$/;"	l
f7	rm.asm	/^  f7:	38 c2                	cmp    %al,%dl$/;"	l
f7	sh.asm	/^      f7:	75 12                	jne    10b <runcmd+0x10b>$/;"	l
f7	zombie.asm	/^  f7:	c3                   	ret    $/;"	l
f71	sh.asm	/^     f71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
f74	usertests.asm	/^     f74:	83 c4 10             	add    $0x10,%esp$/;"	l
f75	sh.asm	/^     f75:	79 11                	jns    f88 <printint+0x2a>$/;"	l
f77	sh.asm	/^     f77:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
f77	usertests.asm	/^     f77:	e9 bc 00 00 00       	jmp    1038 <sharedfd+0x1d7>$/;"	l
f7c	usertests.asm	/^     f7c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
f7e	sh.asm	/^     f7e:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f8	cat.asm	/^  f8:	3b 03                	cmp    (%ebx),%eax$/;"	l
f8	echo.asm	/^  f8:	eb 03                	jmp    fd <strlen+0x12>$/;"	l
f8	ln.asm	/^  f8:	0f b6 c0             	movzbl %al,%eax$/;"	l
f8	stressfs.asm	/^  f8:	83 c4 10             	add    $0x10,%esp$/;"	l
f8	zombie.asm	/^  f8:	55                   	push   %ebp$/;"	l
f81	sh.asm	/^     f81:	f7 d8                	neg    %eax$/;"	l
f83	sh.asm	/^     f83:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f83	usertests.asm	/^     f83:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f86	sh.asm	/^     f86:	eb 06                	jmp    f8e <printint+0x30>$/;"	l
f86	usertests.asm	/^     f86:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f88	sh.asm	/^     f88:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f89	usertests.asm	/^     f89:	eb 32                	jmp    fbd <sharedfd+0x15c>$/;"	l
f8b	sh.asm	/^     f8b:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
f8b	usertests.asm	/^     f8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
f8e	sh.asm	/^     f8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
f9	grep.asm	/^  f9:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
f9	kill.asm	/^  f9:	c9                   	leave  $/;"	l
f9	ls.asm	/^  f9:	50                   	push   %eax$/;"	l
f9	mkdir.asm	/^  f9:	74 e3                	je     de <strcmp+0x5>$/;"	l
f9	rm.asm	/^  f9:	74 e3                	je     de <strcmp+0x5>$/;"	l
f9	sh.asm	/^      f9:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9	wc.asm	/^  f9:	89 cb                	mov    %ecx,%ebx$/;"	l
f9	zombie.asm	/^  f9:	89 e5                	mov    %esp,%ebp$/;"	l
f92	usertests.asm	/^     f92:	eb 21                	jmp    fb5 <sharedfd+0x154>$/;"	l
f94	usertests.asm	/^     f94:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
f95	sh.asm	/^     f95:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f97	usertests.asm	/^     f97:	03 45 f4             	add    -0xc(%ebp),%eax$/;"	l
f98	sh.asm	/^     f98:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9a	usertests.asm	/^     f9a:	8a 00                	mov    (%eax),%al$/;"	l
f9b	sh.asm	/^     f9b:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
f9c	usertests.asm	/^     f9c:	3c 63                	cmp    $0x63,%al$/;"	l
f9e	usertests.asm	/^     f9e:	75 03                	jne    fa3 <sharedfd+0x142>$/;"	l
fa	cat.asm	/^  fa:	7c 95                	jl     91 <main+0x34>$/;"	l
fa	echo.asm	/^  fa:	ff 45 fc             	incl   -0x4(%ebp)$/;"	l
fa	init.asm	/^  fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax$/;"	l
fa	kill.asm	/^  fa:	c3                   	ret    $/;"	l
fa	ls.asm	/^  fa:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
fa0	sh.asm	/^     fa0:	f7 f1                	div    %ecx$/;"	l
fa0	usertests.asm	/^     fa0:	ff 45 f0             	incl   -0x10(%ebp)$/;"	l
fa2	sh.asm	/^     fa2:	89 d0                	mov    %edx,%eax$/;"	l
fa3	usertests.asm	/^     fa3:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
fa4	sh.asm	/^     fa4:	8a 90 bc 14 00 00    	mov    0x14bc(%eax),%dl$/;"	l
fa6	usertests.asm	/^     fa6:	03 45 f4             	add    -0xc(%ebp),%eax$/;"	l
fa9	usertests.asm	/^     fa9:	8a 00                	mov    (%eax),%al$/;"	l
faa	sh.asm	/^     faa:	8d 45 dc             	lea    -0x24(%ebp),%eax$/;"	l
fab	usertests.asm	/^     fab:	3c 70                	cmp    $0x70,%al$/;"	l
fad	sh.asm	/^     fad:	03 45 f4             	add    -0xc(%ebp),%eax$/;"	l
fad	usertests.asm	/^     fad:	75 03                	jne    fb2 <sharedfd+0x151>$/;"	l
faf	usertests.asm	/^     faf:	ff 45 ec             	incl   -0x14(%ebp)$/;"	l
fb	forktest.asm	/^  fb:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
fb	kill.asm	/^  fb:	55                   	push   %ebp$/;"	l
fb	ln.asm	/^  fb:	89 d1                	mov    %edx,%ecx$/;"	l
fb	mkdir.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	rm.asm	/^  fb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fb	stressfs.asm	/^  fb:	83 ec 08             	sub    $0x8,%esp$/;"	l
fb	usertests.asm	/^      fb:	83 ec 08             	sub    $0x8,%esp$/;"	l
fb	wc.asm	/^  fb:	83 3b 01             	cmpl   $0x1,(%ebx)$/;"	l
fb	zombie.asm	/^  fb:	83 ec 04             	sub    $0x4,%esp$/;"	l
fb0	sh.asm	/^     fb0:	88 10                	mov    %dl,(%eax)$/;"	l
fb2	sh.asm	/^     fb2:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
fb2	usertests.asm	/^     fb2:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
fb5	sh.asm	/^     fb5:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
fb5	usertests.asm	/^     fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fb8	sh.asm	/^     fb8:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
fb8	usertests.asm	/^     fb8:	83 f8 09             	cmp    $0x9,%eax$/;"	l
fbb	sh.asm	/^     fbb:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
fbb	usertests.asm	/^     fbb:	76 d7                	jbe    f94 <sharedfd+0x133>$/;"	l
fbd	usertests.asm	/^     fbd:	83 ec 04             	sub    $0x4,%esp$/;"	l
fbe	sh.asm	/^     fbe:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
fc	cat.asm	/^  fc:	e8 37 02 00 00       	call   338 <exit>$/;"	l
fc	grep.asm	/^  fc:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
fc	kill.asm	/^  fc:	89 e5                	mov    %esp,%ebp$/;"	l
fc	sh.asm	/^      fc:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fc0	usertests.asm	/^     fc0:	6a 0a                	push   $0xa$/;"	l
fc2	usertests.asm	/^     fc2:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
fc3	sh.asm	/^     fc3:	f7 75 d4             	divl   -0x2c(%ebp)$/;"	l
fc5	usertests.asm	/^     fc5:	50                   	push   %eax$/;"	l
fc6	sh.asm	/^     fc6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
fc6	usertests.asm	/^     fc6:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
fc9	sh.asm	/^     fc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
fc9	usertests.asm	/^     fc9:	e8 e6 2e 00 00       	call   3eb4 <read>$/;"	l
fcd	sh.asm	/^     fcd:	75 c6                	jne    f95 <printint+0x37>$/;"	l
fce	usertests.asm	/^     fce:	83 c4 10             	add    $0x10,%esp$/;"	l
fcf	sh.asm	/^     fcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd:	75 d4                	jne    d3 <main+0xd3>$/;"	l
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	29 c1                	sub    %eax,%ecx$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd:	e8 c2 04 00 00       	call   5c4 <fstat>$/;"	l
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd1	usertests.asm	/^     fd1:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd3	sh.asm	/^     fd3:	74 2a                	je     fff <printint+0xa1>$/;"	l
fd4	usertests.asm	/^     fd4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
fd5	sh.asm	/^     fd5:	8d 45 dc             	lea    -0x24(%ebp),%eax$/;"	l
fd8	sh.asm	/^     fd8:	03 45 f4             	add    -0xc(%ebp),%eax$/;"	l
fd8	usertests.asm	/^     fd8:	7f b1                	jg     f8b <sharedfd+0x12a>$/;"	l
fda	usertests.asm	/^     fda:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdb	sh.asm	/^     fdb:	c6 00 2d             	movb   $0x2d,(%eax)$/;"	l
fdd	usertests.asm	/^     fdd:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
fde	sh.asm	/^     fde:	ff 45 f4             	incl   -0xc(%ebp)$/;"	l
fe	forktest.asm	/^  fe:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
fe	kill.asm	/^  fe:	83 ec 10             	sub    $0x10,%esp$/;"	l
fe	mkdir.asm	/^  fe:	8a 00                	mov    (%eax),%al$/;"	l
fe	rm.asm	/^  fe:	8a 00                	mov    (%eax),%al$/;"	l
fe	stressfs.asm	/^  fe:	6a 00                	push   $0x0$/;"	l
fe	usertests.asm	/^      fe:	68 46 44 00 00       	push   $0x4446$/;"	l
fe	wc.asm	/^  fe:	7f 17                	jg     117 <main+0x30>$/;"	l
fe	zombie.asm	/^  fe:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fe0	usertests.asm	/^     fe0:	e8 df 2e 00 00       	call   3ec4 <close>$/;"	l
fe1	sh.asm	/^     fe1:	eb 1d                	jmp    1000 <printint+0xa2>$/;"	l
fe3	sh.asm	/^     fe3:	8d 45 dc             	lea    -0x24(%ebp),%eax$/;"	l
fe5	usertests.asm	/^     fe5:	83 c4 10             	add    $0x10,%esp$/;"	l
fe6	sh.asm	/^     fe6:	03 45 f4             	add    -0xc(%ebp),%eax$/;"	l
fe8	usertests.asm	/^     fe8:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fe9	sh.asm	/^     fe9:	8a 00                	mov    (%eax),%al$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	sh.asm	/^     feb:	0f be c0             	movsbl %al,%eax$/;"	l
feb	usertests.asm	/^     feb:	68 2a 49 00 00       	push   $0x492a$/;"	l
fee	sh.asm	/^     fee:	83 ec 08             	sub    $0x8,%esp$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	grep.asm	/^  ff:	55                   	push   %ebp$/;"	l
ff	init.asm	/^  ff:	e9 66 ff ff ff       	jmp    6a <main+0x6a>$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	ln.asm	/^  ff:	89 c8                	mov    %ecx,%eax$/;"	l
ff	sh.asm	/^      ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff0	usertests.asm	/^     ff0:	e8 f7 2e 00 00       	call   3eec <unlink>$/;"	l
ff1	sh.asm	/^     ff1:	50                   	push   %eax$/;"	l
ff2	sh.asm	/^     ff2:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
ff5	sh.asm	/^     ff5:	e8 42 ff ff ff       	call   f3c <putc>$/;"	l
ff5	usertests.asm	/^     ff5:	83 c4 10             	add    $0x10,%esp$/;"	l
ff8	usertests.asm	/^     ff8:	81 7d f0 10 27 00 00 	cmpl   $0x2710,-0x10(%ebp)$/;"	l
ffa	sh.asm	/^     ffa:	83 c4 10             	add    $0x10,%esp$/;"	l
ffd	sh.asm	/^     ffd:	eb 01                	jmp    1000 <printint+0xa2>$/;"	l
fff	sh.asm	/^     fff:	90                   	nop$/;"	l
fff	usertests.asm	/^     fff:	75 1d                	jne    101e <sharedfd+0x1bd>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon9	typeref:struct:__anon9::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_BUSY, I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon2	typeref:struct:__anon2::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon9
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt	vm.c	/^struct segdesc gdt[NSEGS];$/;"	v	typeref:struct:segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon3	typeref:struct:__anon3::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
hour	date.h	/^	uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
i2b	mkfs.c	/^i2b(uint inum)$/;"	f
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon4
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;                    \/\/ Local APIC ID; index into cpus[] below$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(void)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(void)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon4	typeref:struct:__anon4::inode	file:
input	console.c	/^} input;$/;"	v	typeref:struct:__anon7
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	kernel.asm	/^    ioapicid = 0;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
irqmask	kernel.asm	/^  irqmask = mask;$/;"	d
irqmask	picirq.c	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	v	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^        ismp = 0;$/;"	d
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
ismp	mp.c	/^int ismp;$/;"	v
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon2
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^    lapic = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val) $/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon6	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
loop	kernel.asm	/^ loop:$/;"	l
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	halt.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	23;"	d	file:
min	mkfs.c	249;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^	uint minute;$/;"	m	struct:rtcdate
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^	uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpbcpu	mp.c	/^mpbcpu(void)$/;"	f
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;   $/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks = (995-LOGSIZE);$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	kernel.asm	/^    ncpu = 1;$/;"	d
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
ninodes	mkfs.c	/^int ninodes = 200;$/;"	v
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	memlayout.h	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	f
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picenable	picirq.c	/^picenable(int irq)$/;"	f
picinit	picirq.c	/^picinit(void)$/;"	f
picsetmask	picirq.c	/^picsetmask(ushort mask)$/;"	f	file:
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon8	typeref:struct:__anon8::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The currently-running process.$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon8
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon1	typeref:union:header::__anon1::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon7	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon1	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^	uint second;$/;"	m	struct:rtcdate
sector	buf.h	/^  uint sector;$/;"	m	struct:buf
sector	log.c	/^  int sector[LOGSIZE];$/;"	m	struct:logheader	file:
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	mkfs.c	/^int size = 1024;$/;"	v
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon1	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void itrunc(struct inode*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	14;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_halt	sysproc.c	/^sys_halt(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscall_names	syscall.c	/^static char *syscall_names[] = {$/;"	v	file:
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
timerinit	timer.c	/^timerinit(void)$/;"	f
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon2	file:
usedblocks	mkfs.c	/^uint usedblocks;$/;"	v
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
v2p	memlayout.h	/^static inline uint v2p(void *a) { return ((uint) (a))  - KERNBASE; }$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon7	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
year	date.h	/^	uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[512];$/;"	v
